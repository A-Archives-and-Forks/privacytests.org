{"all_tests":[{"browser":"chrome","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"83.0.4103.106","chrome":{"chromedriverVersion":"83.0.4103.39 (ccbf011cb2d2b19b506d844400483861342c20cd-refs/branch-heads/4103@{#416})","userDataDir":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/.com.google.Chrome.F4PyfP"},"goog:chromeOptions":{"debuggerAddress":"localhost:62000"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"mac os x","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":862.6750000403263,"desired_value":800,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":862.7300000516698,"desired_value":800,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":75,"desired_value":75,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":7,"desired_value":7,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":75,"desired_value":75,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":63.145000010263175,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.440000015776604,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.480000029318035,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":106,"desired_value":106,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":106,"desired_value":106,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":22,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1200,"desired_value":1200,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":833,"desired_value":710,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1592716072385,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1592716072339,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1592716073097,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1592716073096,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1592716073096,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1592716073096,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1592716072722,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1592716072339,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1592716072322,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1592716072319,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1592716073097,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1592716073097,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1592716072231,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1592716072385,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1592716072709,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1592716072708,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1592716072358,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":78.41500004287809,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:89c:f532:13b7:7d06:f79c","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:89c:f532:13b7:7d06:f79c","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 21 Jun 2020 05:07:54 GMT","readDifferentFirstParty":"Sun, 21 Jun 2020 05:07:54 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"1504789349487916","readDifferentFirstParty":"1504789349487916","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-gulYrEueBqphDTXEW3wNHTlys38\"","readDifferentFirstParty":"W/\"1b-gulYrEueBqphDTXEW3wNHTlys38\"","passed":false,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"5ce740b28b7f388080ec3b09bc485414d08ac96f4e65187cbc829cfc6c4085c3","readDifferentFirstParty":"73dc4239fa6dd09168df189d490bafa1fc8e071d99c22d8a1648bb33c4d1d7b1","passed":true,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"13100897473782935","readDifferentFirstParty":"13100897473782935","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"13100897473782935","readDifferentFirstParty":"13100897473782935","passed":false,"testFailed":false}}},"timeStarted":"2020-06-21T05:07:52.224Z"},{"browser":"chrome","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"83.0.4103.106","chrome":{"chromedriverVersion":"83.0.4103.39 (ccbf011cb2d2b19b506d844400483861342c20cd-refs/branch-heads/4103@{#416})","userDataDir":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/.com.google.Chrome.npf6jK"},"goog:chromeOptions":{"debuggerAddress":"localhost:62026"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"mac os x","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":400.9949999745004,"desired_value":400,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":401.0399999679066,"desired_value":400,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":665,"desired_value":665,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":8,"desired_value":8,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":665,"desired_value":665,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":0,"desired_value":0,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":1.364999997895211,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.140000012237579,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.174999987706542,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":690,"desired_value":690,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":20,"desired_value":21,"passed":false,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":6,"desired_value":0,"passed":false,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":22,"desired_value":5,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":690,"desired_value":690,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":22,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1200,"desired_value":1200,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":833,"desired_value":710,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1592716080526,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1592716080480,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1592716080618,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1592716080480,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1592716080452,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1592716080448,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1592716080679,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1592716080276,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1592716080526,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1592716080602,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1592716080602,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1592716080497,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":16.039999981876463,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:89c:f532:13b7:7d06:f79c","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:89c:f532:13b7:7d06:f79c","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 21 Jun 2020 05:08:02 GMT","readDifferentFirstParty":"Sun, 21 Jun 2020 05:08:02 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"7704111049928193","readDifferentFirstParty":"7704111049928193","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-qudZsmQs36BCa7W1DOdeS2Q1XDs\"","readDifferentFirstParty":"W/\"1b-qudZsmQs36BCa7W1DOdeS2Q1XDs\"","passed":false,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"7fc10a6edd1778fc8435e14e3572d7b19534a17a2602005a17d69c4fed59471b","readDifferentFirstParty":"d4bec7790b1b56e5c3eeae0b6629d9099e659a869c6ea10b93f07245fdfe2fc5","passed":true,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"030504332621091645","readDifferentFirstParty":"030504332621091645","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"030504332621091645","readDifferentFirstParty":"030504332621091645","passed":false,"testFailed":false}}},"timeStarted":"2020-06-21T05:08:00.269Z"}],"git":"a3fe32140115368d2987ad3d0b1b1e20efeee2cb","timeStarted":"2020-06-21T05:07:51.307Z","timeStopped":"2020-06-21T05:08:06.982Z"}