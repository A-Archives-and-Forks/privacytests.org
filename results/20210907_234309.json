{"all_tests":[{"browser":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"91.0.2","moz:accessibilityChecks":false,"moz:buildID":"20210823123856","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":53066,"moz:profile":"/tmp/rust_mozprofilekBUYE6","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":343,"desired_value":300,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":343,"desired_value":300,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":651,"desired_value":651,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":32,"desired_value":32,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":651,"desired_value":651,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":32,"desired_value":32,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":44,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":32,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":32,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":690,"desired_value":690,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":32,"desired_value":32,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":690,"desired_value":690,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":32,"desired_value":32,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":32,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":72,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1040,"desired_value":955,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":955,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":955,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058092513,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058092346,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058092671,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058092670,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058092669,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058092667,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058092557,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058092346,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058092330,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058092318,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058092671,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058092671,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058092318,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058092514,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058092547,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058092546,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058092376,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":79,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":false,"handling":"loaded insecurely"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:41:36 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:41:42 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"00800757608760172","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1c-yaiv4QntDSRcZpnr2JA0jUeoCmc\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"19d522737fb74b2f0ebb8fe4ea5b482c30877eae067a4c11da3036eadb5a2411","readDifferentFirstParty":"4b4d75c3769a2d8ba8e8815ac47562506279ded7d3012cb86b1f3a33ddbf955f","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"00800757608760172","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"1294006253109956","readDifferentFirstParty":"1294006253109956","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"1294006253109956","readDifferentFirstParty":"1294006253109956","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"1294006253109956","readDifferentFirstParty":"1294006253109956","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:41:32.255Z"},{"browser":"chromium","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.63","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.R2ibyF"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":227.39999999850988,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":227.5,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":156,"desired_value":156,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":49,"desired_value":49,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":156,"desired_value":156,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":49,"desired_value":49,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":29.5,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8.399999998509884,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8.899999998509884,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":187,"desired_value":187,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":49,"desired_value":49,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":187,"desired_value":187,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":41,"desired_value":41,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":49,"desired_value":49,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058109028,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058108964,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058109170,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058109170,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058109169,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058109169,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058109074,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058108964,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058108950,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058108948,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058109170,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058109170,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058108938,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058109029,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058109061,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058109059,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058108991,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":58.20000000298023,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":true,"handling":"upgraded"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:41:52 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:41:57 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-ZEjBkHjAEok992N68XHuw4i9sYs\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"820b6123107936335939a4ed02dbbcd6ca2f1825ad538b3fcf85fff65d325346","readDifferentFirstParty":"62e9915f6212c583f4a8551c539a60bc80d7b7750928bd57491dc91b53d9ce31","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7279905795315376","readDifferentFirstParty":"7279905795315376","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"36112162799653236","readDifferentFirstParty":"36112162799653236","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"36112162799653236","readDifferentFirstParty":"36112162799653236","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"36112162799653236","readDifferentFirstParty":"36112162799653236","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:41:48.839Z"},{"browser":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"91.0.2","moz:accessibilityChecks":false,"moz:buildID":"20210823123856","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":53975,"moz:profile":"/tmp/rust_mozprofileS2k4NB","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":343,"desired_value":300,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":343,"desired_value":300,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":436,"desired_value":436,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":5,"desired_value":5,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":436,"desired_value":436,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":5,"desired_value":5,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":44,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":29,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":30,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":468,"desired_value":468,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":468,"desired_value":468,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":5,"desired_value":5,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":31,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":72,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1040,"desired_value":955,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":955,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":955,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058125237,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058125125,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058125460,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058125460,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058125458,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058125457,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058125317,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058125125,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058125115,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058125101,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058125460,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058125460,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058125101,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058125238,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058125267,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058125266,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058125153,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":77,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":false,"handling":"loaded insecurely"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"4350481673332258","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"4350481673332258","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","testFailed":true},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"4350481673332258","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"4350481673332258","readDifferentFirstParty":"4350481673332258","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"4350481673332258","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:42:09 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:42:17 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":true},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-UJMALp80BLE1y6Urm/lcFYgJqY8\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"04cc085d32d26ecc01bf0242868b7775afa3cce3f3de3009fe3ff37316d2c0ea","readDifferentFirstParty":"22e9aeb866bfa0bdf80ba52ba668b9d5f9b5ff1e3897f50dbe39b32970c0033e","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"4350481673332258","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"4350481673332258","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":true}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"2648063231743545","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"2648063231743545","readDifferentFirstParty":"2648063231743545","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:42:05.054Z","incognito":true},{"browser":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.63","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.z2RrEN"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US","desired_value":"en-US,en","passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":209.09999999403954,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":209.39999999850988,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":349,"desired_value":349,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":349,"desired_value":349,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":14.799999997019768,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US","desired_value":"en-US,en","passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9.900000005960464,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":10.200000002980232,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":390,"desired_value":390,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":390,"desired_value":390,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058144235,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058144179,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058144372,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058144372,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058144372,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058144372,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058144275,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058144179,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058144165,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058144161,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058144373,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058144372,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058144153,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058144236,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058144262,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058144260,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058144204,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":46.099999994039536,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":true,"handling":"upgraded"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9500901548526888","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"9500901548526888","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"9500901548526888","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:42:27 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:42:33 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-VjFiLdXe5tF9AZmQdAOwJCB8oQ0\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"e54b8dccba41509022945196b02855ac2ccc62284e54f5e9f5e5922118a2f5b0","readDifferentFirstParty":"3924007ca14511c20c228901d5c61c43cad8d264f5b44f117046a17c9782c5fe","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"9500901548526888","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9500901548526888","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"06037697174137957","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"06037697174137957","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"06037697174137957","readDifferentFirstParty":"06037697174137957","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:42:24.052Z","incognito":true},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.63","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.wdxdiL"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":209.60000000149012,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":210,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":877,"desired_value":877,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":39,"desired_value":39,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":877,"desired_value":877,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":39,"desired_value":39,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":15.5,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8.299999997019768,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8.600000001490116,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":914,"desired_value":914,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":39,"desired_value":39,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":914,"desired_value":914,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":39,"desired_value":39,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058159763,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058159704,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058159900,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058159899,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058159899,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058159899,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058159805,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058159704,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058159688,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058159687,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058159900,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058159900,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058159681,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058159763,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058159794,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058159792,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058159729,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":43.30000000447035,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":true,"handling":"upgraded"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:42:42 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:42:47 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-ACA8F4cThr+kgMbwFrpZnvxAQ/Q\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"b032cbc8c4ed976d8296c255042344d6e3bbdddfb4d9145c0419755e09c6e06f","readDifferentFirstParty":"12a7390a23a60b37e2e2465637c38fb12957c6f5a8b2a8c986cc2fc0dc9a0347","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7916007297678826","readDifferentFirstParty":"7916007297678826","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"9448962454741805","readDifferentFirstParty":"9448962454741805","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"9448962454741805","readDifferentFirstParty":"9448962454741805","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"9448962454741805","readDifferentFirstParty":"9448962454741805","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:42:39.585Z"},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.63","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.gnq5gh"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US","desired_value":"en-US,en","passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":231.70000000298023,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":232.10000000149012,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":165,"desired_value":165,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":165,"desired_value":165,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":38.899999998509884,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US","desired_value":"en-US,en","passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":10.800000004470348,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":11.200000002980232,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":215,"desired_value":215,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":2,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":16,"desired_value":23,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":215,"desired_value":215,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":42,"desired_value":42,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":8,"desired_value":8,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1631058174036,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1631058173973,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1631058174195,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1631058174194,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1631058174194,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1631058174194,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1631058174078,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1631058173973,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1631058173959,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1631058173957,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1631058174195,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1631058174195,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1631058173952,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1631058174037,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1631058174066,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1631058174064,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1631058174002,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":71.29999999701977,"desired_value":0,"passed":false}},"network":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false},"Insecure passive subresource":{"passed":true,"handling":"upgraded"},"Insecure active subresource":{"passed":true,"handling":"blocked"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9491913065954665","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"9491913065954665","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"9491913065954665","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Tue, 07 Sep 2021 23:42:56 GMT","readDifferentFirstParty":"Tue, 07 Sep 2021 23:43:03 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-lY+ruPZGkjNCYrVI30ZLub3EhE4\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"66f57c87df3c907362240813454b3768cb16b6f9542751af935759beedfa5929","readDifferentFirstParty":"f503332d402d40304c1b6e96a97f49da06c15f63adf88a5c3c2431b1fa784a46","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"9491913065954665","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9491913065954665","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"59372420091817","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"59372420091817","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"59372420091817","readDifferentFirstParty":"59372420091817","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}}},"timeStarted":"2021-09-07T23:42:53.858Z","incognito":true}],"git":"4343f4f56cbf98f63cdd6db5978c0976d322b8f3","timeStarted":"2021-09-07T23:41:29.544Z","timeStopped":"2021-09-07T23:43:09.067Z"}