{"all_tests":[{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.bd31Gp"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":600.6000000000931,"desired_value":600,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":600.6000000000931,"desired_value":600,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":845,"desired_value":845,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":21,"desired_value":21,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":845,"desired_value":845,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":21,"desired_value":21,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0.900000000372529,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4.7000000001862645,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4.800000000279397,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":861,"desired_value":861,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":21,"desired_value":21,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":861,"desired_value":861,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":21,"desired_value":21,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910401567,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910401528,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910401701,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910401528,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910401446,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910401446,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910401856,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910401254,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910401567,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910401689,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910401688,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910401541,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":12.700000000186265,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:53:24 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:53:28 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-EmYNDKT0NhesOfELKz5WI4c304w\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"391605a0994ba6dc38736bea5232a5698a3ac7d5c9f99d974fe0abc0d537a360","readDifferentFirstParty":"fd00640edf01d195516e9e63ccb3115a628203c52b8bfe386e13f04855d2655d","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8713079425992911","readDifferentFirstParty":"8713079425992911","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"0187763679420212","readDifferentFirstParty":"0187763679420212","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"0187763679420212","readDifferentFirstParty":"0187763679420212","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:53:21.244Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.6ixrRv"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":231.1999999997206,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":231.1999999997206,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":7,"desired_value":7,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":31.399999999906868,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.100000000093132,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":32,"desired_value":32,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":32,"desired_value":32,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910412942,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910412907,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910412972,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910412907,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910412873,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910412873,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910413022,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910412789,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910412942,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910412959,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910412958,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910412922,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":43.89999999990687,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:53:34 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:53:40 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-TG3XDdtqMbLHVhn5jjoRV+GI7os\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"51a0b16b2e8d1db50c5056caf024f595aa2611f5ce7868d82f1251b565986598","readDifferentFirstParty":"9d49466893a8f51a0be74074d646bf3258431900daf95dd1ad10aef465486025","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"6790571762654996","readDifferentFirstParty":"6790571762654996","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"6345851474549096","readDifferentFirstParty":"6345851474549096","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"6345851474549096","readDifferentFirstParty":"6345851474549096","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:53:32.782Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.pa6BgR"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":291.89999999990687,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":292,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":502,"desired_value":502,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":44,"desired_value":44,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":502,"desired_value":502,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":44,"desired_value":44,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":92.20000000018626,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.099999999627471,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.199999999720603,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":522,"desired_value":522,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":44,"desired_value":44,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":522,"desired_value":522,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":44,"desired_value":44,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910424436,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910424369,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910424513,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910424512,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910424512,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910424512,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910424468,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910424369,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910424293,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910424292,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910424513,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910424513,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910424219,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910424436,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910424456,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910424455,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910424384,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":7.399999999906868,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:53:45 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:53:50 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-HNdQrOiY7rL6DfURSIvag3tq74A\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"6203ce26f4a3aa2324b8896ecb2d60aae15b78b84e7970aeb9a5bd709e88ecb5","readDifferentFirstParty":"7bd34cea9649294d8b406acdf0450fde871e4644aa02ec3b4b90c8e7279d9f15","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"2685319535014057","readDifferentFirstParty":"2685319535014057","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"822492981453675","readDifferentFirstParty":"822492981453675","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"822492981453675","readDifferentFirstParty":"822492981453675","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:53:44.215Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.qkbpIz"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":401.8000000002794,"desired_value":400,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":401.89999999990687,"desired_value":400,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":278,"desired_value":278,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":278,"desired_value":278,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":2.1000000000931323,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.2000000001862645,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.2000000001862645,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":296,"desired_value":296,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":296,"desired_value":296,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910434016,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910433979,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910434148,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910433979,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910433963,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910433963,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910434289,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910433886,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910434017,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910434141,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910434139,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910433993,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":11.800000000279397,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:53:55 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:00 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1c-9BeIWilpXGa3KLzdXL9Q/o0GLXM\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"0ea9cc271c0163f4a74c6a9cdf1d659eddfb22423481a1d7ef61d22d7d5d92ef","readDifferentFirstParty":"3e2cf739b7c33661bc8bdd000f484a4b18b405e9ecf96fab361a4faba1f74597","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"36576304378566427","readDifferentFirstParty":"36576304378566427","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"8643721725884095","readDifferentFirstParty":"8643721725884095","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"8643721725884095","readDifferentFirstParty":"8643721725884095","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:53:53.882Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.F7ylMF"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":197.60000000009313,"desired_value":100,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":197.60000000009313,"desired_value":100,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":144,"desired_value":144,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":144,"desired_value":144,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":4,"desired_value":4,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":97.8000000002794,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.199999999720603,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.2999999998137355,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":163,"desired_value":163,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":163,"desired_value":163,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910444090,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910444054,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910444114,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910444054,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910444038,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910444037,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910444156,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910443958,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910444090,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910444109,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910444108,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910444068,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":11.100000000093132,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:05 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:09 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-BoRz72RWNWGOXrsJMaLIjb/Ij+k\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"463fd520d6eebf26ce0bcda2aa8ad52b6335ecd79bd33b02a82d5d8e719e2e37","readDifferentFirstParty":"2e126dbc55ac74ef9b519004cda7e543c5def7d32eed50c747577d035e21a552","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"3279968290917368","readDifferentFirstParty":"3279968290917368","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"9891086162653597","readDifferentFirstParty":"9891086162653597","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"9891086162653597","readDifferentFirstParty":"9891086162653597","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:03.950Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.XRxKaG"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":216.39999999990687,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":216.5,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":739,"desired_value":739,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":739,"desired_value":739,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":16.700000000186265,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.899999999906868,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.899999999906868,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":755,"desired_value":755,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":755,"desired_value":755,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910453678,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910453638,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910453749,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910453749,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910453748,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910453748,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910453708,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910453638,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910453624,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910453622,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910453749,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910453749,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910453531,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910453678,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910453696,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910453695,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910453654,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":29.5,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:15 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:19 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-/86PhugUIpukbn7Ggav4dH6wy18\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"d4c3db6a3f296f1de3a25144d323d07f72a121d9241a77c616207d710a04fc50","readDifferentFirstParty":"402d93d19ef9272218a149e361287a72c35cdf0e025cd3505489e2c799218876","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7520244635040481","readDifferentFirstParty":"7520244635040481","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"9406839373443978","readDifferentFirstParty":"9406839373443978","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"9406839373443978","readDifferentFirstParty":"9406839373443978","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:13.527Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.BXzUIV"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":208.10000000009313,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":208.10000000009313,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":756,"desired_value":756,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":23,"desired_value":23,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":756,"desired_value":756,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":23,"desired_value":23,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":8.400000000372529,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.5,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.599999999627471,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":774,"desired_value":774,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":23,"desired_value":23,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":774,"desired_value":774,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":23,"desired_value":23,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910463684,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910463638,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910463719,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910463638,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910463625,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910463624,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910463766,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910463557,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910463684,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910463709,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910463707,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910463654,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":18.100000000093132,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:25 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:29 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-OUm9GizkvrH7BxtSq2uw871AbVA\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"2f5e41a493971065cba5b14b63f123515cb359744a52ab029ac94c8a6147a619","readDifferentFirstParty":"318510d909131c2a2c25062562c99c924cd529bca9a9a25ef547c31c88d18b3d","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7903617592550676","readDifferentFirstParty":"7903617592550676","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"8119913290051453","readDifferentFirstParty":"8119913290051453","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"8119913290051453","readDifferentFirstParty":"8119913290051453","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:23.551Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.L04nZQ"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":204.3000000002794,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":204.40000000037253,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":777,"desired_value":777,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":777,"desired_value":777,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":4.5,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":794,"desired_value":794,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":794,"desired_value":794,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":33,"desired_value":33,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910473714,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910473677,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910473788,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910473787,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910473787,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910473787,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910473743,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910473677,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910473658,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910473657,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910473788,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910473788,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910473582,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910473715,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910473731,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910473730,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910473693,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":16.700000000186265,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:35 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:39 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-34a8HIaoT92C0xXcNEE12tkCp9Q\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"c105b8c48114e01d747028667b0b9fd2d9ce26db1319163976d77fbbf6667175","readDifferentFirstParty":"7fc26f44a55b37e00251c028b96df1b3750dd8f39643179b932ad643e5acff6c","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8430882479864243","readDifferentFirstParty":"8430882479864243","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"24540473839599164","readDifferentFirstParty":"24540473839599164","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"24540473839599164","readDifferentFirstParty":"24540473839599164","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:33.580Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.3evHgZ"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":192.20000000018626,"desired_value":100,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":192.20000000018626,"desired_value":100,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":788,"desired_value":788,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":43,"desired_value":43,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":788,"desired_value":788,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":43,"desired_value":43,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":92.5,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.099999999627471,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.099999999627471,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":806,"desired_value":806,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":43,"desired_value":43,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":806,"desired_value":806,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":43,"desired_value":43,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910483731,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910483692,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910483800,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910483798,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910483798,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910483798,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910483759,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910483692,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910483679,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910483678,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910483800,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910483800,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910483605,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910483731,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910483747,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910483745,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910483706,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":4.5,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:45 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:49 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-eYPgjKX+qpTr85IUAAjT4wlSUAI\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"ce743a8d7ba5e97fabb21a46c5dd38f54dd84352febcb16ee6ffebac32182d7b","readDifferentFirstParty":"1e03d762d45a57f017e6d4c4d68e96b79daebf8e639e3153f41a44eee5e53952","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8399312784962454","readDifferentFirstParty":"8399312784962454","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"2008505886149219","readDifferentFirstParty":"2008505886149219","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"2008505886149219","readDifferentFirstParty":"2008505886149219","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:43.602Z"},{"browser":"chromium","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.yrL1fL"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":199.6999999997206,"desired_value":100,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":199.6999999997206,"desired_value":100,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":872,"desired_value":872,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":872,"desired_value":872,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":99.89999999990687,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.100000000093132,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.100000000093132,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":889,"desired_value":889,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":25,"desired_value":25,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2021,"desired_value":2021,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":9,"desired_value":16,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":889,"desired_value":889,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":54,"desired_value":54,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":53,"desired_value":53,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":64,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1265,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1376,"desired_value":1258,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1265,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1258,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1629910493818,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1629910493776,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1629910493843,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1629910493776,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1629910493763,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1629910493762,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1629910493882,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1629910493681,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1629910493818,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1629910493834,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1629910493832,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1629910493793,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":9.599999999627471,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 25 Aug 2021 16:54:55 GMT","readDifferentFirstParty":"Wed, 25 Aug 2021 16:54:59 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1c-TbRm1mbvLXXeU2Bdo8ni/66le/0\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"f709bc235c46bf4e0dff312a9046de7512396302fa84123f10ca897e754d35cd","readDifferentFirstParty":"637e651f787423ef806554574d76a2d60dadb35e648b9c1c0b6f9a0769fa7959","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"37706834306427317","readDifferentFirstParty":"37706834306427317","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"745779267057902","readDifferentFirstParty":"745779267057902","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"745779267057902","readDifferentFirstParty":"745779267057902","passed":false,"testFailed":false}}},"timeStarted":"2021-08-25T16:54:53.678Z"}],"git":"8ed96e1534fd38dc93c885384aa1edbd4d0af07d","timeStarted":"2021-08-25T16:53:20.793Z","timeStopped":"2021-08-25T16:55:02.964Z"}