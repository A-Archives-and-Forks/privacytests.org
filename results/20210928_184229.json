{"all_tests":[{"browser":"tor browser","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"78.14.0","moz:accessibilityChecks":false,"moz:buildID":"20210507070101","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":110392,"moz:profile":"/tmp/rust_mozprofile0lnLsO","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4900,"desired_value":4900,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":0,"desired_value":0,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1000,"desired_value":1000,"passed":true},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1000,"desired_value":1000,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true}},"misc":{"Tor enabled":{"IsTorExit":true,"passed":true},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":true,"readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":"Error: NetworkError when attempting to fetch resource.","passed":true,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Tue, 28 Sep 2021 18:40:20 GMT","readDifferentFirstParty":"Tue, 28 Sep 2021 18:41:53 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":true,"readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"10-6Nsbr1+PXNsICI0zsQmx66Kn7B0\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":true,"readSameFirstParty":"Error: image load failed","readDifferentFirstParty":"Error: image load failed","testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"5ae55c0a5c81a5280d1baa5cd36f23be5e1944123838309cdfadda3625c24273","readDifferentFirstParty":"d6d3d9fc6c52334c4f544c0805ce091ad03923c11f2a65b98ca6675db72734d2","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"9147280412418357","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n      // Keep pinging so we don't drop the connection.\n      setInterval(() => fetch(`https://h1.arthuredelstein.net:8901/?mode=write&s\\secret=${secret}`), 1000);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":" ","readDifferentFirstParty":" ","testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"030478237684183007","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"030478237684183007","readDifferentFirstParty":"030478237684183007","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"6916723684261139","passed":false},"gclid":{"value":"6916723684261139","passed":false},"msclkid":{"value":"6916723684261139","passed":false},"mc_eid":{"value":"6916723684261139","passed":false},"dclid":{"value":"6916723684261139","passed":false},"oly_anon_id":{"value":"6916723684261139","passed":false},"oly_enc_id":{"value":"6916723684261139","passed":false},"_openstat":{"value":"6916723684261139","passed":false},"vero_conv":{"value":"6916723684261139","passed":false},"vero_id":{"value":"6916723684261139","passed":false},"wickedid":{"value":"6916723684261139","passed":false},"yclid":{"value":"6916723684261139","passed":false},"__s":{"value":"6916723684261139","passed":false},"rb_clickid":{"value":"6916723684261139","passed":false},"s_cid":{"value":"6916723684261139","passed":false},"ml_subscriber":{"value":"6916723684261139","passed":false},"ml_subscriber_hash":{"value":"6916723684261139","passed":false},"_hsenc":{"value":"6916723684261139","passed":false},"__hssc":{"value":"6916723684261139","passed":false},"__hstc":{"value":"6916723684261139","passed":false},"__hsfp":{"value":"6916723684261139","passed":false},"hsCtaTracking":{"value":"6916723684261139","passed":false},"mkt_tok":{"value":"6916723684261139","passed":false},"igshid":{"value":"6916723684261139","passed":false}}},"timeStarted":"2021-09-28T18:39:45.542Z"}],"git":"b8220dad7d5c5a400a11975425a6dd166c10e0b5","timeStarted":"2021-09-28T18:39:38.089Z","timeStopped":"2021-09-28T18:42:29.262Z"}