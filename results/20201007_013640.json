{"all_tests":[{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"83.0a1","moz:accessibilityChecks":false,"moz:buildID":"20201006041051","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":29771,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofileYrQDWG","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"19.6.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":271,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":271,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":480,"desired_value":480,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":35,"desired_value":35,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":57,"desired_value":57,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":480,"desired_value":480,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":35,"desired_value":35,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":57,"desired_value":57,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":71,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":497,"desired_value":497,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":35,"desired_value":35,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":57,"desired_value":57,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":497,"desired_value":497,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":35,"desired_value":35,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":57,"desired_value":57,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":9,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":23,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1062,"desired_value":988,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1602034557335,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1602034557285,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1602034557492,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1602034557492,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1602034557491,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1602034557491,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1602034557389,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1602034557285,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1602034557284,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1602034557284,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1602034557492,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1602034557492,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1602034557219,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1602034557336,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1602034557386,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1602034557386,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1602034557306,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":82,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"029481944299960317","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"029481944299960317","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"029481944299960317","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"029481944299960317","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"029481944299960317","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 07 Oct 2020 01:36:00 GMT","readDifferentFirstParty":"Wed, 07 Oct 2020 01:36:00 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","passed":false,"testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1d-+ZKgB8qTlS70bE2vc4GW8pbUzGw\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"26bf5c9c5d8ec33fbe9f076473b2d0fba09c84b091b45f98a159cab5be4beac0","readDifferentFirstParty":"26bf5c9c5d8ec33fbe9f076473b2d0fba09c84b091b45f98a159cab5be4beac0","passed":false,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","passed":false,"testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"029481944299960317","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"029481944299960317","readDifferentFirstParty":"","passed":true,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"8850266243562837","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"8850266243562837","readDifferentFirstParty":"8850266243562837","passed":false,"testFailed":false}}},"timeStarted":"2020-10-07T01:35:57.213Z","prefs":{"privacy.partition.network_state":false,"network.cookieBehavior":4}},{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"83.0a1","moz:accessibilityChecks":false,"moz:buildID":"20201006041051","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":29778,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofileaJJY2J","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"19.6.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":216,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":216,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":755,"desired_value":755,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":755,"desired_value":755,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":17,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":772,"desired_value":772,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":772,"desired_value":772,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":13,"desired_value":13,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":8,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":23,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1062,"desired_value":988,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1602034573672,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1602034573615,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1602034573767,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1602034573767,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1602034573767,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1602034573766,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1602034573692,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1602034573615,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1602034573613,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1602034573613,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1602034573767,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1602034573767,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1602034573549,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1602034573672,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1602034573689,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1602034573689,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1602034573638,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":26,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"053607386710390115","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"053607386710390115","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"053607386710390115","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"053607386710390115","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"053607386710390115","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 07 Oct 2020 01:36:16 GMT","readDifferentFirstParty":"Wed, 07 Oct 2020 01:36:24 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","passed":false,"testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1d-dyV5kndEReAO/wiTfYHTAve6G/A\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"Error: image load failed","readDifferentFirstParty":"Error: image load failed","passed":false,"testFailed":true},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"e525f86e77e1545dcdf5813590e267df61fbf447ac22730373ed4f79b1b83592","readDifferentFirstParty":"909ffa132f605a224358918c004b9a0a2276d8177b368974f797ba2a68257cf0","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","passed":false,"testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"053607386710390115","readDifferentFirstParty":"","passed":true,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"4881320913413416","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"4881320913413416","readDifferentFirstParty":"4881320913413416","passed":false,"testFailed":false}}},"timeStarted":"2020-10-07T01:36:13.542Z","prefs":{"privacy.partition.network_state":true,"network.cookieBehavior":4}},{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"81.0","moz:accessibilityChecks":false,"moz:buildID":"20200917005511","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":29786,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofilexyTJ8n","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"19.6.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":254,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":254,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":215,"desired_value":215,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":30,"desired_value":30,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":215,"desired_value":215,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":30,"desired_value":30,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":54,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":11,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":11,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":236,"desired_value":236,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":30,"desired_value":30,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":6,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":2,"desired_value":3,"passed":false,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":18,"desired_value":1,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":236,"desired_value":236,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":9,"desired_value":9,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":30,"desired_value":30,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":12,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":23,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1062,"desired_value":988,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":1440,"desired_value":988,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1602034590112,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1602034590057,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1602034590230,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1602034590230,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1602034590228,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1602034590227,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1602034590162,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1602034590056,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1602034590054,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1602034590053,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1602034590230,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1602034590230,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1602034589973,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1602034590112,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1602034590157,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1602034590157,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1602034590078,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":66,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IsTorExit":false,"passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"})\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 07 Oct 2020 01:36:32 GMT","readDifferentFirstParty":"Wed, 07 Oct 2020 01:36:32 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","passed":false,"testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1c-UifiVSinIDmyOlHi6QlX07+CeV0\"","readDifferentFirstParty":"W/\"1c-UifiVSinIDmyOlHi6QlX07+CeV0\"","passed":false,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"c4771ee515ac3ce94110d3351f3bd6fd7b367859e053e7b7f437fc2dfb3f08a8","readDifferentFirstParty":"c4771ee515ac3ce94110d3351f3bd6fd7b367859e053e7b7f437fc2dfb3f08a8","passed":false,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err))\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","passed":false,"testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"36824833915612043","readDifferentFirstParty":"36824833915612043","passed":false,"testFailed":false},"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"4968500088326271","readDifferentFirstParty":"4968500088326271","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\")\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"4968500088326271","readDifferentFirstParty":"4968500088326271","passed":false,"testFailed":false}}},"timeStarted":"2020-10-07T01:36:29.967Z"}],"git":"76986a8fb18d0301c90a624380498381a71d7411","timeStarted":"2020-10-07T01:35:55.449Z","timeStopped":"2020-10-07T01:36:40.630Z"}