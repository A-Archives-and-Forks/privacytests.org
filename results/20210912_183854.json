{"all_tests":[{"browser":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"92.0","moz:accessibilityChecks":false,"moz:buildID":"20210903235534","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":12279,"moz:profile":"/tmp/rust_mozprofileEhNQhr","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":244,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":44,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":5,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":50,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":77,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":947,"desired_value":862,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1920,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1080,"desired_value":862,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":50,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Sun, 12 Sep 2021 18:38:08 GMT","readDifferentFirstParty":"Sun, 12 Sep 2021 18:38:14 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"45345698231701803","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"1c-+XtzS/EDu38TDojVg/TNHeYrsvA\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"5c20580d943b566828058ca8956927db540a82acde22284969f32a7bab16fbcc","readDifferentFirstParty":"8009c38ba6c02255f269c7a3b96764e4acee7b0e47e209f89357c4d358c51a4e","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"45345698231701803","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"7399998954782265","readDifferentFirstParty":"7399998954782265","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"7399998954782265","readDifferentFirstParty":"7399998954782265","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"7399998954782265","readDifferentFirstParty":"7399998954782265","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"004144165858751769","passed":false},"gclid":{"value":"004144165858751769","passed":false},"msclkid":{"value":"004144165858751769","passed":false},"mc_eid":{"value":"004144165858751769","passed":false},"dclid":{"value":"004144165858751769","passed":false},"oly_anon_id":{"value":"004144165858751769","passed":false},"oly_enc_id":{"value":"004144165858751769","passed":false},"_openstat":{"value":"004144165858751769","passed":false},"vero_conv":{"value":"004144165858751769","passed":false},"vero_id":{"value":"004144165858751769","passed":false},"wickedid":{"value":"004144165858751769","passed":false},"yclid":{"value":"004144165858751769","passed":false},"__s":{"value":"004144165858751769","passed":false},"rb_clickid":{"value":"004144165858751769","passed":false},"s_cid":{"value":"004144165858751769","passed":false},"ml_subscriber":{"value":"004144165858751769","passed":false},"ml_subscriber_hash":{"value":"004144165858751769","passed":false},"_hsenc":{"value":"004144165858751769","passed":false},"__hssc":{"value":"004144165858751769","passed":false},"__hstc":{"value":"004144165858751769","passed":false},"__hsfp":{"value":"004144165858751769","passed":false},"hsCtaTracking":{"value":"004144165858751769","passed":false},"mkt_tok":{"value":"004144165858751769","passed":false},"igshid":{"value":"004144165858751769","passed":false}}},"timeStarted":"2021-09-12T18:38:05.003Z"},{"browser":"safari","capabilities":{"safari:platformVersion":"11.5.2","safari:automaticInspection":false,"webkit:WebRTC":{"DisableICECandidateFiltering":false,"DisableInsecureMediaCapture":false},"browserVersion":"14.1.2","strictFileInteractability":false,"browserName":"Safari","safari:useSimulator":false,"safari:automaticProfiling":false,"safari:platformBuildVersion":"20G95","acceptInsecureCerts":false,"setWindowRect":true,"platformName":"macOS","safari:diagnose":false,"webdriver.remote.sessionid":"2c56bd64f6331213893133414b06e719a7448b30"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":300,"desired_value":300,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":1,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":3,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":3,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":25,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":743,"desired_value":691,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":691,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":7,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":"001782266444299907","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"001782266444299907","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","unsupported":true,"readSameFirstParty":"Error: Can't find variable: SharedWorker","readDifferentFirstParty":"Error: Can't find variable: SharedWorker","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":"001782266444299907","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":true,"readSameFirstParty":"Error: Can't find variable: BroadcastChannel","readDifferentFirstParty":"Error: Can't find variable: BroadcastChannel","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Sun, 12 Sep 2021 18:38:32 GMT","readDifferentFirstParty":"Sun, 12 Sep 2021 18:38:40 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":"Error: undefined is not an object (evaluating 'cacheKeys[0].url')","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","unsupported":true,"readSameFirstParty":"Error: favicons never requested","readDifferentFirstParty":"Error: favicons never requested","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","unsupported":false,"testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"Error: image load failed","readDifferentFirstParty":"Error: image load failed","testFailed":true},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"b60b915e053ca2c71d25496d4a55ac2cfdb4451ab158fdd5c6ff4f4671e9d019","readDifferentFirstParty":"f7adfe1a79197745d2fc1b8bbb7dafc5e7257be463ee0b017ea897bb00392132","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"Error: prefetch isn't being used","readDifferentFirstParty":"Error: prefetch isn't being used","testFailed":true},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: Web SQL is deprecated","readDifferentFirstParty":"Error: Web SQL is deprecated","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":"001782266444299907","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"001782266444299907","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"3810139153819887","readDifferentFirstParty":"","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"3810139153819887","readDifferentFirstParty":"3810139153819887","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"3810139153819887","readDifferentFirstParty":"3810139153819887","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"21658436513973767","passed":false},"gclid":{"value":"21658436513973767","passed":false},"msclkid":{"value":"21658436513973767","passed":false},"mc_eid":{"value":"21658436513973767","passed":false},"dclid":{"value":"21658436513973767","passed":false},"oly_anon_id":{"value":"21658436513973767","passed":false},"oly_enc_id":{"value":"21658436513973767","passed":false},"_openstat":{"value":"21658436513973767","passed":false},"vero_conv":{"value":"21658436513973767","passed":false},"vero_id":{"value":"21658436513973767","passed":false},"wickedid":{"value":"21658436513973767","passed":false},"yclid":{"value":"21658436513973767","passed":false},"__s":{"value":"21658436513973767","passed":false},"rb_clickid":{"value":"21658436513973767","passed":false},"s_cid":{"value":"21658436513973767","passed":false},"ml_subscriber":{"value":"21658436513973767","passed":false},"ml_subscriber_hash":{"value":"21658436513973767","passed":false},"_hsenc":{"value":"21658436513973767","passed":false},"__hssc":{"value":"21658436513973767","passed":false},"__hstc":{"value":"21658436513973767","passed":false},"__hsfp":{"value":"21658436513973767","passed":false},"hsCtaTracking":{"value":"21658436513973767","passed":false},"mkt_tok":{"value":"21658436513973767","passed":false},"igshid":{"value":"21658436513973767","passed":false}}},"timeStarted":"2021-09-12T18:38:23.077Z"}],"git":"e6898580691a3291028c8fb4877ff37c9df0a48a","timeStarted":"2021-09-12T18:38:03.452Z","timeStopped":"2021-09-12T18:38:54.309Z"}