{"all_tests":[{"browser":"firefox","capabilities":{"moz:profile":"C:\\Windows\\proxy\\rust_mozprofilermaSZV","moz:geckodriverVersion":"0.29.1","timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"pageLoadStrategy":"normal","unhandledPromptBehavior":"dismiss and notify","strictFileInteractability":false,"moz:headless":false,"proxy":{},"moz:accessibilityChecks":false,"moz:useNonSpecCompliantPointerOrigin":false,"acceptInsecureCerts":false,"browserVersion":"92.0","moz:shutdownTimeout":60000,"platformVersion":"10.0","moz:processID":7744,"browserName":"firefox","moz:buildID":"20210903235534","platformName":"windows","setWindowRect":true,"moz:webdriverClick":true,"webdriver.remote.sessionid":"9bb017c3760eed535598a43b80e6e740dac4b4dd"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":671,"desired_value":600,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":71,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":66,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":66,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1040,"desired_value":1024,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":744,"desired_value":643,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":643,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":47,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:52:00 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:52:06 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"07675775300061538","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":null,"readDifferentFirstParty":null,"testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"09a13cc407338e1d401a4e55b2fa34afd753b233bf885230320f11b72f885aa6","readDifferentFirstParty":"043071eabdcc2ca8f89aff0bd2cdc5f39f439e73b6287069fd1021413080a212","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"07675775300061538","readDifferentFirstParty":"","passed":true,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"025f302cd503ea6ce7e79e5b7c481153","readDifferentFirstParty":" ","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"5543353369384771","readDifferentFirstParty":"5543353369384771","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"5543353369384771","readDifferentFirstParty":"5543353369384771","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"5543353369384771","readDifferentFirstParty":"5543353369384771","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"2493440665343949","passed":false},"gclid":{"value":"2493440665343949","passed":false},"msclkid":{"value":"2493440665343949","passed":false},"mc_eid":{"value":"2493440665343949","passed":false},"dclid":{"value":"2493440665343949","passed":false},"oly_anon_id":{"value":"2493440665343949","passed":false},"oly_enc_id":{"value":"2493440665343949","passed":false},"_openstat":{"value":"2493440665343949","passed":false},"vero_conv":{"value":"2493440665343949","passed":false},"vero_id":{"value":"2493440665343949","passed":false},"wickedid":{"value":"2493440665343949","passed":false},"yclid":{"value":"2493440665343949","passed":false},"__s":{"value":"2493440665343949","passed":false},"rb_clickid":{"value":"2493440665343949","passed":false},"s_cid":{"value":"2493440665343949","passed":false},"ml_subscriber":{"value":"2493440665343949","passed":false},"ml_subscriber_hash":{"value":"2493440665343949","passed":false},"_hsenc":{"value":"2493440665343949","passed":false},"__hssc":{"value":"2493440665343949","passed":false},"__hstc":{"value":"2493440665343949","passed":false},"__hsfp":{"value":"2493440665343949","passed":false},"hsCtaTracking":{"value":"2493440665343949","passed":false},"mkt_tok":{"value":"2493440665343949","passed":false},"igshid":{"value":"2493440665343949","passed":false}}},"timeStarted":"2021-10-01T07:51:46.374Z"},{"browser":"firefox","capabilities":{"moz:profile":"C:\\Windows\\proxy\\rust_mozprofileX96KrT","moz:geckodriverVersion":"0.29.1","timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"pageLoadStrategy":"normal","unhandledPromptBehavior":"dismiss and notify","strictFileInteractability":false,"moz:headless":false,"proxy":{},"moz:accessibilityChecks":false,"moz:useNonSpecCompliantPointerOrigin":false,"acceptInsecureCerts":false,"browserVersion":"92.0","moz:shutdownTimeout":60000,"platformVersion":"10.0","moz:processID":9688,"browserName":"firefox","moz:buildID":"20210903235534","platformName":"windows","setWindowRect":true,"moz:webdriverClick":true,"webdriver.remote.sessionid":"ad35aab39e22bbdcd4f3576622d1a8827e8e29c4"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":334,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":34,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":57,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":57,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1040,"desired_value":1024,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":744,"desired_value":643,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":643,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":3,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":true,"readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"4689608561755023","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":"4689608561755023","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:52:41 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:52:50 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":true,"readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":null,"readDifferentFirstParty":null,"testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"5851adef3c5e7d72d8be2bb0601a8e62c52194ee3807260889f5be76fd66120c","readDifferentFirstParty":"1ce9b79da180bbb5a478a52d6bbc6074e8ab72605b6e7c42b4e72f318b8d1934","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"4689608561755023","readDifferentFirstParty":"","passed":true,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"72fc34bd8576a0b14fd1d56914469b51","readDifferentFirstParty":" ","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"10293774190871541","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"10293774190871541","readDifferentFirstParty":"10293774190871541","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"8171342254944802","passed":false},"gclid":{"value":"8171342254944802","passed":false},"msclkid":{"value":"8171342254944802","passed":false},"mc_eid":{"value":"8171342254944802","passed":false},"dclid":{"value":"8171342254944802","passed":false},"oly_anon_id":{"value":"8171342254944802","passed":false},"oly_enc_id":{"value":"8171342254944802","passed":false},"_openstat":{"value":"8171342254944802","passed":false},"vero_conv":{"value":"8171342254944802","passed":false},"vero_id":{"value":"8171342254944802","passed":false},"wickedid":{"value":"8171342254944802","passed":false},"yclid":{"value":"8171342254944802","passed":false},"__s":{"value":"8171342254944802","passed":false},"rb_clickid":{"value":"8171342254944802","passed":false},"s_cid":{"value":"8171342254944802","passed":false},"ml_subscriber":{"value":"8171342254944802","passed":false},"ml_subscriber_hash":{"value":"8171342254944802","passed":false},"_hsenc":{"value":"8171342254944802","passed":false},"__hssc":{"value":"8171342254944802","passed":false},"__hstc":{"value":"8171342254944802","passed":false},"__hsfp":{"value":"8171342254944802","passed":false},"hsCtaTracking":{"value":"8171342254944802","passed":false},"mkt_tok":{"value":"8171342254944802","passed":false},"igshid":{"value":"8171342254944802","passed":false}}},"timeStarted":"2021-10-01T07:52:29.790Z","incognito":true},{"browser":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"94.0.4606.54","chrome":{"chromedriverVersion":"94.0.4606.41 (333e85df3c9b656b518b5f1add5ff246365b6c24-refs/branch-heads/4606@{#845})","userDataDir":"C:\\Windows\\proxy\\scoped_dir8516_199417009"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"e04d94a0e83e6b4f09375d382ac3f4ea57a548b2"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":2756.6999999999534,"desired_value":2700,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":56.799999999813735,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":37,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":575,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":5,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":575,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":15.899999999906868,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:53:27 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:53:36 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"f-KMIDilhPs/t2gr+ra+QknN2YjPw\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"fae8aad0609e1c3df045f8d364247e074fcbf8e331d8ba1cfa2f68bf725d0445","readDifferentFirstParty":"2346123c376f00b2f7dda23c58a47e601628dd4f86f48dc8b57472ab58700135","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"629107882488416","readDifferentFirstParty":"629107882488416","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"2e4bc38d95772c26c77cb707c73a2ed2","readDifferentFirstParty":"2e4bc38d95772c26c77cb707c73a2ed2","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"2918327127540008","readDifferentFirstParty":"2918327127540008","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"2918327127540008","readDifferentFirstParty":"2918327127540008","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"2918327127540008","readDifferentFirstParty":"2918327127540008","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7696087578039736","passed":false},"gclid":{"value":"7696087578039736","passed":false},"msclkid":{"value":"7696087578039736","passed":false},"mc_eid":{"value":"7696087578039736","passed":false},"dclid":{"value":"7696087578039736","passed":false},"oly_anon_id":{"value":"7696087578039736","passed":false},"oly_enc_id":{"value":"7696087578039736","passed":false},"_openstat":{"value":"7696087578039736","passed":false},"vero_conv":{"value":"7696087578039736","passed":false},"vero_id":{"value":"7696087578039736","passed":false},"wickedid":{"value":"7696087578039736","passed":false},"yclid":{"value":"7696087578039736","passed":false},"__s":{"value":"7696087578039736","passed":false},"rb_clickid":{"value":"7696087578039736","passed":false},"s_cid":{"value":"7696087578039736","passed":false},"ml_subscriber":{"value":"7696087578039736","passed":false},"ml_subscriber_hash":{"value":"7696087578039736","passed":false},"_hsenc":{"value":"7696087578039736","passed":false},"__hssc":{"value":"7696087578039736","passed":false},"__hstc":{"value":"7696087578039736","passed":false},"__hsfp":{"value":"7696087578039736","passed":false},"hsCtaTracking":{"value":"7696087578039736","passed":false},"mkt_tok":{"value":"7696087578039736","passed":false},"igshid":{"value":"7696087578039736","passed":false}}},"timeStarted":"2021-10-01T07:53:12.287Z"},{"browser":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"94.0.4606.54","chrome":{"chromedriverVersion":"94.0.4606.41 (333e85df3c9b656b518b5f1add5ff246365b6c24-refs/branch-heads/4606@{#845})","userDataDir":"C:\\Windows\\proxy\\scoped_dir2892_324304166"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"89027176911c5040388f72dfe2e2f9c60b19abc7"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":382.4000000000233,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":82.69999999995343,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":19.400000000023283,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":575,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":5,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":575,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":17.099999999976717,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"38908206492895725","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"38908206492895725","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:54:02 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:54:10 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"11-4hBVxYu0+sE8oH2inUFzLydPe8Y\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"e04a87290829991b1308428ca926847b40a3cb80191c47e4442e148ddb28d3ee","readDifferentFirstParty":"0ad94abcebc7082aa5835cf5ace6f16e183253160184da7a89085787c4452839","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"38908206492895725","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"38908206492895725","readDifferentFirstParty":"38908206492895725","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"f990bd48b8fda946b67592ffa1ee84b8","readDifferentFirstParty":"f990bd48b8fda946b67592ffa1ee84b8","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"01935453825681721","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"01935453825681721","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"01935453825681721","readDifferentFirstParty":"01935453825681721","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"8669212732933456","passed":false},"gclid":{"value":"8669212732933456","passed":false},"msclkid":{"value":"8669212732933456","passed":false},"mc_eid":{"value":"8669212732933456","passed":false},"dclid":{"value":"8669212732933456","passed":false},"oly_anon_id":{"value":"8669212732933456","passed":false},"oly_enc_id":{"value":"8669212732933456","passed":false},"_openstat":{"value":"8669212732933456","passed":false},"vero_conv":{"value":"8669212732933456","passed":false},"vero_id":{"value":"8669212732933456","passed":false},"wickedid":{"value":"8669212732933456","passed":false},"yclid":{"value":"8669212732933456","passed":false},"__s":{"value":"8669212732933456","passed":false},"rb_clickid":{"value":"8669212732933456","passed":false},"s_cid":{"value":"8669212732933456","passed":false},"ml_subscriber":{"value":"8669212732933456","passed":false},"ml_subscriber_hash":{"value":"8669212732933456","passed":false},"_hsenc":{"value":"8669212732933456","passed":false},"__hssc":{"value":"8669212732933456","passed":false},"__hstc":{"value":"8669212732933456","passed":false},"__hsfp":{"value":"8669212732933456","passed":false},"hsCtaTracking":{"value":"8669212732933456","passed":false},"mkt_tok":{"value":"8669212732933456","passed":false},"igshid":{"value":"8669212732933456","passed":false}}},"timeStarted":"2021-10-01T07:53:54.373Z","incognito":true},{"browser":"edge","capabilities":{"acceptInsecureCerts":false,"browserName":"msedge","browserVersion":"94.0.992.31","ms:edgeOptions":{"debuggerAddress":"localhost:9222"},"msedge":{"msedgedriverVersion":"94.0.992.31 (fd65e6bbedc86a22f2393b7cd8d1585c54cada42)","userDataDir":"C:\\Windows\\proxy\\scoped_dir11172_772673344"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"17ad42bb158ccbaf28fcccfd2ba013b9cef817b7"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":415.70000000006985,"desired_value":400,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":15.900000000023283,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":28.599999999976717,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":576,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":5,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":576,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":86.09999999997672,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:54:37 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:54:48 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"10-izVBi/4RZYR+En+HYxZLrJPBBeE\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"6f46323e022934d57936b2c7b75c40758f162f6af9c498518adbc44ce57c1582","readDifferentFirstParty":"5c39d6a2b0d8c20ad47a36f2326bff847b6e060cb2a22b7100bd1197f614a839","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"8204841665315896","readDifferentFirstParty":"8204841665315896","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"636e1eed2dfe9798ed24a0085cce8968","readDifferentFirstParty":"636e1eed2dfe9798ed24a0085cce8968","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"5849374059393964","readDifferentFirstParty":"5849374059393964","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"5849374059393964","readDifferentFirstParty":"5849374059393964","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"5849374059393964","readDifferentFirstParty":"5849374059393964","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"32167972155102786","passed":false},"gclid":{"value":"32167972155102786","passed":false},"msclkid":{"value":"32167972155102786","passed":false},"mc_eid":{"value":"32167972155102786","passed":false},"dclid":{"value":"32167972155102786","passed":false},"oly_anon_id":{"value":"32167972155102786","passed":false},"oly_enc_id":{"value":"32167972155102786","passed":false},"_openstat":{"value":"32167972155102786","passed":false},"vero_conv":{"value":"32167972155102786","passed":false},"vero_id":{"value":"32167972155102786","passed":false},"wickedid":{"value":"32167972155102786","passed":false},"yclid":{"value":"32167972155102786","passed":false},"__s":{"value":"32167972155102786","passed":false},"rb_clickid":{"value":"32167972155102786","passed":false},"s_cid":{"value":"32167972155102786","passed":false},"ml_subscriber":{"value":"32167972155102786","passed":false},"ml_subscriber_hash":{"value":"32167972155102786","passed":false},"_hsenc":{"value":"32167972155102786","passed":false},"__hssc":{"value":"32167972155102786","passed":false},"__hstc":{"value":"32167972155102786","passed":false},"__hsfp":{"value":"32167972155102786","passed":false},"hsCtaTracking":{"value":"32167972155102786","passed":false},"mkt_tok":{"value":"32167972155102786","passed":false},"igshid":{"value":"32167972155102786","passed":false}}},"timeStarted":"2021-10-01T07:54:26.733Z"},{"browser":"edge","capabilities":{"acceptInsecureCerts":false,"browserName":"msedge","browserVersion":"94.0.992.31","ms:edgeOptions":{"debuggerAddress":"localhost:9222"},"msedge":{"msedgedriverVersion":"94.0.992.31 (fd65e6bbedc86a22f2393b7cd8d1585c54cada42)","userDataDir":"C:\\Windows\\proxy\\scoped_dir8264_1089781746"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"3cfa0c605f71547495b7afe0837a170047d7806f","platform":"WINDOWS"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":344.9000000001397,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":45.10000000009313,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":23.399999999906868,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":576,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":5,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":576,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":4.100000000093132,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:55:19 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:55:28 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"10-ufeZAJv8exTpHI3d8/RFIIIIzmA\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"56bbebf7c05c63be07b4bae353f25e1d351bb56e4db6b278b16a04411793c7b1","readDifferentFirstParty":"a9275d4b1ef510fd5674bea9b117d795281eb296f341999d7960a58000b6635c","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"6763870021099916","readDifferentFirstParty":"6763870021099916","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"0d51ebcb9969d781ec79bbb1bcb2caba","readDifferentFirstParty":"0d51ebcb9969d781ec79bbb1bcb2caba","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"3040738937736338","readDifferentFirstParty":"3040738937736338","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"3040738937736338","readDifferentFirstParty":"3040738937736338","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"3040738937736338","readDifferentFirstParty":"3040738937736338","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"9939634942064677","passed":false},"gclid":{"value":"9939634942064677","passed":false},"msclkid":{"value":"9939634942064677","passed":false},"mc_eid":{"value":"9939634942064677","passed":false},"dclid":{"value":"9939634942064677","passed":false},"oly_anon_id":{"value":"9939634942064677","passed":false},"oly_enc_id":{"value":"9939634942064677","passed":false},"_openstat":{"value":"9939634942064677","passed":false},"vero_conv":{"value":"9939634942064677","passed":false},"vero_id":{"value":"9939634942064677","passed":false},"wickedid":{"value":"9939634942064677","passed":false},"yclid":{"value":"9939634942064677","passed":false},"__s":{"value":"9939634942064677","passed":false},"rb_clickid":{"value":"9939634942064677","passed":false},"s_cid":{"value":"9939634942064677","passed":false},"ml_subscriber":{"value":"9939634942064677","passed":false},"ml_subscriber_hash":{"value":"9939634942064677","passed":false},"_hsenc":{"value":"9939634942064677","passed":false},"__hssc":{"value":"9939634942064677","passed":false},"__hstc":{"value":"9939634942064677","passed":false},"__hsfp":{"value":"9939634942064677","passed":false},"hsCtaTracking":{"value":"9939634942064677","passed":false},"mkt_tok":{"value":"9939634942064677","passed":false},"igshid":{"value":"9939634942064677","passed":false}}},"timeStarted":"2021-10-01T07:55:11.069Z","incognito":true},{"browser":"opera","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.82","chrome":{"chromedriverVersion":"93.0.4577.15 (660fc11082ba57405eca2e8c49c3e1af756fbfae-refs/branch-heads/4577@{#203})","userDataDir":"/tmp/.com.google.Chrome.9GJhka"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":315.79999999701977,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":15.899999998509884,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4.4000000059604645,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":240,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":159,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1398,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":789,"desired_value":679,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1920,"desired_value":1398,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1080,"desired_value":679,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":29.5,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:56:08 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:56:12 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"10-5sdCAmfRScezlnYgWKX/4bxit5U\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"ffe03326fdd7452a71c93ee594f0350f56e19ac2b16883f030f8607e8e84be08","readDifferentFirstParty":"2c30c065f85c4826b8aa05f5a3b31df1020f1bc36d9bea14bf09092417f952fd","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"5941298211602151","readDifferentFirstParty":"5941298211602151","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"13f815f8692993b4d0619c46206a7790","readDifferentFirstParty":"13f815f8692993b4d0619c46206a7790","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"3508996068125967","readDifferentFirstParty":"3508996068125967","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"3508996068125967","readDifferentFirstParty":"3508996068125967","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"3508996068125967","readDifferentFirstParty":"3508996068125967","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7140999394528804","passed":false},"gclid":{"value":"7140999394528804","passed":false},"msclkid":{"value":"7140999394528804","passed":false},"mc_eid":{"value":"7140999394528804","passed":false},"dclid":{"value":"7140999394528804","passed":false},"oly_anon_id":{"value":"7140999394528804","passed":false},"oly_enc_id":{"value":"7140999394528804","passed":false},"_openstat":{"value":"7140999394528804","passed":false},"vero_conv":{"value":"7140999394528804","passed":false},"vero_id":{"value":"7140999394528804","passed":false},"wickedid":{"value":"7140999394528804","passed":false},"yclid":{"value":"7140999394528804","passed":false},"__s":{"value":"7140999394528804","passed":false},"rb_clickid":{"value":"7140999394528804","passed":false},"s_cid":{"value":"7140999394528804","passed":false},"ml_subscriber":{"value":"7140999394528804","passed":false},"ml_subscriber_hash":{"value":"7140999394528804","passed":false},"_hsenc":{"value":"7140999394528804","passed":false},"__hssc":{"value":"7140999394528804","passed":false},"__hstc":{"value":"7140999394528804","passed":false},"__hsfp":{"value":"7140999394528804","passed":false},"hsCtaTracking":{"value":"7140999394528804","passed":false},"mkt_tok":{"value":"7140999394528804","passed":false},"igshid":{"value":"7140999394528804","passed":false}}},"timeStarted":"2021-10-01T07:56:04.140Z"},{"browser":"opera","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.82","chrome":{"chromedriverVersion":"93.0.4577.15 (660fc11082ba57405eca2e8c49c3e1af756fbfae-refs/branch-heads/4577@{#203})","userDataDir":"/tmp/.com.google.Chrome.Hnqeml"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":237,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":37.099999994039536,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4.100000001490116,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":240,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":159,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1398,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":789,"desired_value":717,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1920,"desired_value":1398,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1080,"desired_value":717,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":44.899999998509884,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"76494087874121","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"76494087874121","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:56:21 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:56:26 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"e-5r8Y1uvjY29OIBgNmrLDoq2DC/E\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"25731ec0c83ccc849b45f9fc6216ed6994592fbb7cdd7058a4ba7498744d6b81","readDifferentFirstParty":"77d35379aaaee21baa6c9271bc59a83763ac3598cc613cecd2da6d5ff8a29054","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"76494087874121","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"76494087874121","readDifferentFirstParty":"76494087874121","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"128f850753e472b91f8af52a60625127","readDifferentFirstParty":"128f850753e472b91f8af52a60625127","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"3210972729998378","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"3210972729998378","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"3210972729998378","readDifferentFirstParty":"3210972729998378","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"9524984817089446","passed":false},"gclid":{"value":"9524984817089446","passed":false},"msclkid":{"value":"9524984817089446","passed":false},"mc_eid":{"value":"9524984817089446","passed":false},"dclid":{"value":"9524984817089446","passed":false},"oly_anon_id":{"value":"9524984817089446","passed":false},"oly_enc_id":{"value":"9524984817089446","passed":false},"_openstat":{"value":"9524984817089446","passed":false},"vero_conv":{"value":"9524984817089446","passed":false},"vero_id":{"value":"9524984817089446","passed":false},"wickedid":{"value":"9524984817089446","passed":false},"yclid":{"value":"9524984817089446","passed":false},"__s":{"value":"9524984817089446","passed":false},"rb_clickid":{"value":"9524984817089446","passed":false},"s_cid":{"value":"9524984817089446","passed":false},"ml_subscriber":{"value":"9524984817089446","passed":false},"ml_subscriber_hash":{"value":"9524984817089446","passed":false},"_hsenc":{"value":"9524984817089446","passed":false},"__hssc":{"value":"9524984817089446","passed":false},"__hstc":{"value":"9524984817089446","passed":false},"__hsfp":{"value":"9524984817089446","passed":false},"hsCtaTracking":{"value":"9524984817089446","passed":false},"mkt_tok":{"value":"9524984817089446","passed":false},"igshid":{"value":"9524984817089446","passed":false}}},"timeStarted":"2021-10-01T07:56:18.162Z","incognito":true},{"browser":"safari","capabilities":{"safari:platformVersion":"11.5.2","safari:automaticInspection":false,"webkit:WebRTC":{"DisableICECandidateFiltering":false,"DisableInsecureMediaCapture":false},"browserVersion":"14.1.2","strictFileInteractability":false,"browserName":"Safari","safari:useSimulator":false,"safari:automaticProfiling":false,"safari:platformBuildVersion":"20G95","acceptInsecureCerts":false,"setWindowRect":true,"platformName":"macOS","safari:diagnose":false,"webdriver.remote.sessionid":"04d29e415d05d69c55bed1d9a7b889aa812ea981"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":474.00000000000006,"desired_value":400,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":75.00000000000006,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9.000000000000002,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":9.000000000000002,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":25,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":743,"desired_value":691,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":691,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":91,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"20138950013561452","readDifferentFirstParty":"20138950013561452","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"20138950013561452","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"20138950013561452","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":true,"readSameFirstParty":"Error: Can't find variable: SharedWorker","readDifferentFirstParty":"Error: Can't find variable: SharedWorker","testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"20138950013561452","readDifferentFirstParty":"20138950013561452","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":true,"readSameFirstParty":"Error: Can't find variable: BroadcastChannel","readDifferentFirstParty":"Error: Can't find variable: BroadcastChannel","testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:56:45 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:56:52 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"20138950013561452","readDifferentFirstParty":"Error: undefined is not an object (evaluating 'cacheKeys[0].url')","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":true,"readSameFirstParty":"Error: No requests received","readDifferentFirstParty":"Error: No requests received","testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":null,"readDifferentFirstParty":null,"testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":true,"readSameFirstParty":"Error: image load failed","readDifferentFirstParty":"Error: image load failed","testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “tls.arthuredelstein.net” which could put your confidential information at risk.","readDifferentFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “tls.arthuredelstein.net” which could put your confidential information at risk.","testFailed":true},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":true,"readSameFirstParty":"Error: No requests received","readDifferentFirstParty":"Error: No requests received","testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: Web SQL is deprecated","readDifferentFirstParty":"Error: Web SQL is deprecated","testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “h2.arthuredelstein.net” which could put your confidential information at risk.","readDifferentFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “h2.arthuredelstein.net” which could put your confidential information at risk.","testFailed":true},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “h1.arthuredelstein.net” which could put your confidential information at risk.","readDifferentFirstParty":"Error: The certificate for this server is invalid. You might be connecting to a server that is pretending to be “h1.arthuredelstein.net” which could put your confidential information at risk.","testFailed":true},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":" ","readDifferentFirstParty":" ","testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"7497650979353894","readDifferentFirstParty":"","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"7497650979353894","readDifferentFirstParty":"7497650979353894","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"7497650979353894","readDifferentFirstParty":"7497650979353894","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"5598751321329429","passed":false},"gclid":{"value":"5598751321329429","passed":false},"msclkid":{"value":"5598751321329429","passed":false},"mc_eid":{"value":"5598751321329429","passed":false},"dclid":{"value":"5598751321329429","passed":false},"oly_anon_id":{"value":"5598751321329429","passed":false},"oly_enc_id":{"value":"5598751321329429","passed":false},"_openstat":{"value":"5598751321329429","passed":false},"vero_conv":{"value":"5598751321329429","passed":false},"vero_id":{"value":"5598751321329429","passed":false},"wickedid":{"value":"5598751321329429","passed":false},"yclid":{"value":"5598751321329429","passed":false},"__s":{"value":"5598751321329429","passed":false},"rb_clickid":{"value":"5598751321329429","passed":false},"s_cid":{"value":"5598751321329429","passed":false},"ml_subscriber":{"value":"5598751321329429","passed":false},"ml_subscriber_hash":{"value":"5598751321329429","passed":false},"_hsenc":{"value":"5598751321329429","passed":false},"__hssc":{"value":"5598751321329429","passed":false},"__hstc":{"value":"5598751321329429","passed":false},"__hsfp":{"value":"5598751321329429","passed":false},"hsCtaTracking":{"value":"5598751321329429","passed":false},"mkt_tok":{"value":"5598751321329429","passed":false},"igshid":{"value":"5598751321329429","passed":false}}},"timeStarted":"2021-10-01T07:56:36.722Z"},{"browser":"tor browser","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"78.14.0","moz:accessibilityChecks":false,"moz:buildID":"20210507070101","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":23958,"moz:profile":"/tmp/rust_mozprofileI7tK3O","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4900,"desired_value":4900,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":0,"desired_value":0,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":900,"desired_value":900,"passed":true},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":900,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true}},"misc":{"Tor enabled":{"IsTorExit":true,"passed":true},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":true,"readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"Error: NetworkError when attempting to fetch resource.","passed":true,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:57:28 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:58:04 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":true,"readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"W/\"10-iJriK/wLO9h2IMKAUv+pZVg6iqw\"","readDifferentFirstParty":null,"passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"888d4d3fbd67f81b5332f99165acf1b50fab1c4876da520f0b1e0eb9f7e95e3e","readDifferentFirstParty":"263d7808d2100acf6c20cc8289ed87cdf2cda0b7682f253b42845ae4b1e85bdd","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":true,"readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"7506796049709792","readDifferentFirstParty":"","passed":true,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":" ","readDifferentFirstParty":" ","testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"6643454904803976","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"6643454904803976","readDifferentFirstParty":"6643454904803976","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"9646195903469001","passed":false},"gclid":{"value":"9646195903469001","passed":false},"msclkid":{"value":"9646195903469001","passed":false},"mc_eid":{"value":"9646195903469001","passed":false},"dclid":{"value":"9646195903469001","passed":false},"oly_anon_id":{"value":"9646195903469001","passed":false},"oly_enc_id":{"value":"9646195903469001","passed":false},"_openstat":{"value":"9646195903469001","passed":false},"vero_conv":{"value":"9646195903469001","passed":false},"vero_id":{"value":"9646195903469001","passed":false},"wickedid":{"value":"9646195903469001","passed":false},"yclid":{"value":"9646195903469001","passed":false},"__s":{"value":"9646195903469001","passed":false},"rb_clickid":{"value":"9646195903469001","passed":false},"s_cid":{"value":"9646195903469001","passed":false},"ml_subscriber":{"value":"9646195903469001","passed":false},"ml_subscriber_hash":{"value":"9646195903469001","passed":false},"_hsenc":{"value":"9646195903469001","passed":false},"__hssc":{"value":"9646195903469001","passed":false},"__hstc":{"value":"9646195903469001","passed":false},"__hsfp":{"value":"9646195903469001","passed":false},"hsCtaTracking":{"value":"9646195903469001","passed":false},"mkt_tok":{"value":"9646195903469001","passed":false},"igshid":{"value":"9646195903469001","passed":false}}},"timeStarted":"2021-10-01T07:57:06.234Z"},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"94.0.4606.61","chrome":{"chromedriverVersion":"93.0.4577.15 (660fc11082ba57405eca2e8c49c3e1af756fbfae-refs/branch-heads/4577@{#203})","userDataDir":"/tmp/.com.google.Chrome.p4IJEq"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":198.5,"desired_value":100,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":98.60000000149012,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":4.399999998509884,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":37,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":945,"desired_value":913,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1033,"desired_value":817,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1920,"desired_value":913,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1080,"desired_value":817,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":10.299999997019768,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"sec-gpc":"1","passed":true}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"8263136816288013","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:58:39 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:58:46 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"b869820fe79a6776bcc22379d914fa7727d7dfdc1477fa63ee2c7a6f9019bd7a","readDifferentFirstParty":"2eca7ed49833ec4513064869b0e8cb9feb2338d7d85ecc708e64fbc870746b11","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"8263136816288013","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"8263136816288013","readDifferentFirstParty":"8263136816288013","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":true,"readSameFirstParty":"588ba4b13b4b73da38cecd2ac1ddcd26","readDifferentFirstParty":"588ba4b13b4b73da38cecd2ac1ddcd26","testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"9535606882502281","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"9535606882502281","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"9535606882502281","readDifferentFirstParty":"9535606882502281","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"passed":true},"gclid":{"passed":true},"msclkid":{"passed":true},"mc_eid":{"passed":true},"dclid":{"passed":true},"oly_anon_id":{"passed":true},"oly_enc_id":{"passed":true},"_openstat":{"passed":true},"vero_conv":{"passed":true},"vero_id":{"passed":true},"wickedid":{"passed":true},"yclid":{"passed":true},"__s":{"passed":true},"rb_clickid":{"passed":true},"s_cid":{"passed":true},"ml_subscriber":{"passed":true},"ml_subscriber_hash":{"passed":true},"_hsenc":{"passed":true},"__hssc":{"passed":true},"__hstc":{"passed":true},"__hsfp":{"passed":true},"hsCtaTracking":{"passed":true},"mkt_tok":{"value":"43809012682227344","passed":false},"igshid":{"value":"43809012682227344","passed":false}}},"timeStarted":"2021-10-01T07:58:35.169Z"},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"94.0.4606.61","chrome":{"chromedriverVersion":"93.0.4577.15 (660fc11082ba57405eca2e8c49c3e1af756fbfae-refs/branch-heads/4577@{#203})","userDataDir":"/tmp/.com.google.Chrome.99goRI"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":230.39999999850988,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":30.399999998509884,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":5.100000001490116,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":37,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":945,"desired_value":913,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1033,"desired_value":817,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1920,"desired_value":913,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1080,"desired_value":817,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":38.600000001490116,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"GPC enabled":{"sec-gpc":"1","passed":true}},"https":{"Upgradable image":{"passed":true,"result":"blocked"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"async (secret) => {\n      try {\n        return await IdbKeyVal.set(\"secret\", secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() => IdbKeyVal.get(\"secret\")","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      try {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(secret);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 100);\n      })","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => {\n      try {\n        return URL.createObjectURL(new Blob([secret]));\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"1817106803627293","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      try {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data === \"request\") {\n            bc.postMessage(secret);\n          }\n        };\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","unsupported":false,"readSameFirstParty":"Fri, 01 Oct 2021 07:58:55 GMT","readDifferentFirstParty":"Fri, 01 Oct 2021 07:59:03 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      try {\n        let cache = await caches.open(\"supercookies\");\n        cache.addAll([`test.css?key=${key}`]);\n      } catch (e) {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"No requests received\");\n      }\n      return count;\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      } else {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      let prime = await fetch(testURI(\"etag\", \"\", key));\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"etag\", \"\", key));\n      let receivedIfNoneMatch = response.headers.get(\"x-received-if-none-match\");\n      if (receivedIfNoneMatch === \"undefined\") {\n        return undefined;\n      } else {\n        return receivedIfNoneMatch;\n      }\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","unsupported":false,"readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","unsupported":false,"readSameFirstParty":"f92a30862c9d00b1622177096f954aebb3148102cae31f6d9e73544669e900b1","readDifferentFirstParty":"93d74a521716428e3cfa71e8b37ef07611d4ec3f7e133de2b11769d4197b7547","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"No requests received\");\n      }\n      return countString;\n    }","unsupported":false,"readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      if (!window.openDatabase) {\n        throw new Error(\"Unsupported\");\n      }\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"1817106803627293","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"1817106803627293","readDifferentFirstParty":"1817106803627293","passed":false,"testFailed":false},"h3_connection":{"write":"async (secret) => {\n      // Ensure that we can switch over to h3 via alt-svc:\n      for (let i = 0; i<3; ++i) {\n        await fetch(`https://h3.arthuredelstein.net:4433/`);\n      }\n      // Are we now connecting over h3?\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      let text = await response.text();\n      // Empty response text indicates we are not connecting over h3:\n      if (text.trim() === \"\") {\n        throw new Error(\"Unsupported\");\n      }\n    }","read":"async () => {\n      let response = await fetch(`https://h3.arthuredelstein.net:4433/connection_id`);\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"03b69e53a7fda223959c535011a9335b","readDifferentFirstParty":"03b69e53a7fda223959c535011a9335b","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      if (!navigator.serviceWorker) {\n        throw new Error(\"Unsupported\");\n      }\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","unsupported":false,"readSameFirstParty":"6996862803293273","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","unsupported":false,"readSameFirstParty":"6996862803293273","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"6996862803293273","readDifferentFirstParty":"6996862803293273","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","unsupported":false,"readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"passed":true},"gclid":{"passed":true},"msclkid":{"passed":true},"mc_eid":{"passed":true},"dclid":{"passed":true},"oly_anon_id":{"passed":true},"oly_enc_id":{"passed":true},"_openstat":{"passed":true},"vero_conv":{"passed":true},"vero_id":{"passed":true},"wickedid":{"passed":true},"yclid":{"passed":true},"__s":{"passed":true},"rb_clickid":{"passed":true},"s_cid":{"passed":true},"ml_subscriber":{"passed":true},"ml_subscriber_hash":{"passed":true},"_hsenc":{"passed":true},"__hssc":{"passed":true},"__hstc":{"passed":true},"__hsfp":{"passed":true},"hsCtaTracking":{"passed":true},"mkt_tok":{"value":"9726633301944263","passed":false},"igshid":{"value":"9726633301944263","passed":false}}},"timeStarted":"2021-10-01T07:58:51.708Z","incognito":true},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"94.0.4606.61","chrome":{"chromedriverVersion":"93.0.4577.15 (660fc11082ba57405eca2e8c49c3e1af756fbfae-refs/branch-heads/4577@{#203})","userDataDir":"/tmp/.com.google.Chrome.HSkpJa"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":null,"timeStarted":"2021-10-01T07:59:08.401Z","tor_mode":true}],"git":"83ce9f6d037c80a09bb5b6d78c9a79506624309b","timeStarted":"2021-10-01T07:51:38.314Z","timeStopped":"2021-10-01T08:02:25.188Z"}