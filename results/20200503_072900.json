{"all_tests":[{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"77.0a1","moz:accessibilityChecks":false,"moz:buildID":"20200502214527","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":6100,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofileq4w6Cp","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"18.7.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":211,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":212,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":487,"desired_value":487,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":16,"desired_value":16,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":487,"desired_value":487,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":16,"desired_value":16,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":12,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":506,"desired_value":506,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":16,"desired_value":16,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":506,"desired_value":506,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":16,"desired_value":16,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":9,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":23,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":811,"desired_value":737,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":737,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":737,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1588490896411,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1588490896361,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1588490896503,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1588490896502,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1588490896501,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1588490896500,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1588490896434,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1588490896360,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1588490896359,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1588490896358,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1588490896503,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1588490896503,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1588490896288,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1588490896411,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1588490896432,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1588490896432,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1588490896383,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":21,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:18.515630+00:00","readDifferentFirstParty":"2020-05-03T07:28:18.515630+00:00","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:18 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:18 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"8134989625667988","readDifferentFirstParty":"8134989625667988","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:15.732Z"},{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"77.0a1","moz:accessibilityChecks":false,"moz:buildID":"20200502214527","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":6107,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofilezIVKii","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"18.7.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":200,"desired_value":200,"passed":true},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":200,"desired_value":200,"passed":true},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":7,"desired_value":7,"passed":true},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":200,"desired_value":200,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":7,"desired_value":7,"passed":true},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":200,"desired_value":200,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":200,"desired_value":200,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":7,"desired_value":7,"passed":true,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":200,"desired_value":200,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":24,"desired_value":24,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":800,"desired_value":800,"passed":true},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":800,"desired_value":800,"passed":true},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":800,"desired_value":800,"passed":true},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7125221627605025","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7125221627605025","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7125221627605025","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7125221627605025","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7125221627605025","readDifferentFirstParty":"Error: NetworkError when attempting to fetch resource.","passed":true,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7125221627605025","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:26.216836+00:00","readDifferentFirstParty":"2020-05-03T07:28:31.732595+00:00","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:26 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:31 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7125221627605025","readDifferentFirstParty":"Error: can't access property \"url\", cacheKeys[0] is undefined","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:23.509Z","prefs":{"privacy.resistFingerprinting":true,"privacy.firstparty.isolate":true}},{"browser":"firefox","driverType":"firefox","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"77.0a1","moz:accessibilityChecks":false,"moz:buildID":"20200502214527","moz:geckodriverVersion":"0.26.0","moz:headless":false,"moz:processID":6113,"moz:profile":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/rust_mozprofile2l7y55","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"mac","platformVersion":"18.7.0","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":186,"desired_value":100,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":187,"desired_value":100,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":991,"desired_value":991,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":35,"desired_value":35,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":991,"desired_value":991,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":35,"desired_value":35,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":87,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":4,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":14,"desired_value":14,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":14,"desired_value":14,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":36,"desired_value":36,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":11,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":23,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1280,"desired_value":1280,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":811,"desired_value":737,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","actual_value":"20181001000000","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","passed":true},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","passed":true},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1280,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":737,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1280,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":737,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1588490915932,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1588490915887,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1588490916008,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1588490916008,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1588490916007,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1588490916006,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1588490915956,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1588490915887,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1588490915885,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1588490915883,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1588490916008,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1588490916008,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1588490915819,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1588490915932,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1588490915953,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1588490915953,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1588490915903,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":99,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9534562534563784","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9534562534563784","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9534562534563784","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"9534562534563784","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"9534562534563784","readDifferentFirstParty":"9534562534563784","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"9534562534563784","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:37.966578+00:00","readDifferentFirstParty":"2020-05-03T07:28:37.966578+00:00","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:38 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:38 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9534562534563784","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:35.118Z","prefs":{"network.cookie.cookieBehavior":5}},{"browser":"chrome","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"81.0.4044.129","chrome":{"chromedriverVersion":"81.0.4044.69 (6813546031a4bc83f717a2ef7cd4ac6ec1199132-refs/branch-heads/4044@{#776})","userDataDir":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/.com.google.Chrome.5BB0ca"},"goog:chromeOptions":{"debuggerAddress":"localhost:60281"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"mac os x","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":254.69999999950232,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":254.76499999967928,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":497,"desired_value":497,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":46,"desired_value":46,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":497,"desired_value":497,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":46,"desired_value":46,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":55.12499999967986,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.079999999201391,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.115000000136206,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":521,"desired_value":521,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":46,"desired_value":46,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":521,"desired_value":521,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":46,"desired_value":46,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":22,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1200,"desired_value":1200,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":833,"desired_value":710,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":710,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1588490926410,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1588490926365,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1588490926445,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1588490926365,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1588490926351,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1588490926350,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1588490926513,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1588490926256,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1588490926410,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1588490926428,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1588490926427,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1588490926382,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":68.71500000015658,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:47.936351+00:00","readDifferentFirstParty":"2020-05-03T07:28:47.936351+00:00","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:48 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:48 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"49834318474544803","readDifferentFirstParty":"49834318474544803","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:45.842Z"},{"browser":"safari","driverType":"safari","capabilities":{"safari:platformVersion":"10.14.6","safari:automaticInspection":false,"webkit:WebRTC":{"DisableICECandidateFiltering":false,"DisableInsecureMediaCapture":false},"browserVersion":"13.1","strictFileInteractability":false,"browserName":"Safari","safari:useSimulator":false,"safari:automaticProfiling":false,"safari:platformBuildVersion":"18G87","acceptInsecureCerts":false,"setWindowRect":true,"platformName":"macOS","safari:diagnose":false},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-us","desired_value":"en-US","passed":false},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-us","desired_value":"en-US,en","passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":230,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":230,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":867,"desired_value":867,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":50,"desired_value":50,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":867,"desired_value":867,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":50,"desired_value":50,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":31,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-us","desired_value":"en-US","passed":false,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-us","desired_value":"en-US,en","passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":8,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":881,"desired_value":881,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":50,"desired_value":50,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":881,"desired_value":881,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":50,"desired_value":50,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":8,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":300,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":800,"desired_value":800,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":600,"desired_value":537,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{},"1":{},"2":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":800,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":537,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":800,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":537,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1588490930814,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1588490930734,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1588490930841,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1588490930734,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1588490930734,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1588490930732,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1588490930875,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1588490930642,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1588490930815,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1588490930840,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1588490930836,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1588490930752,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":42,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7911712696346731","readDifferentFirstParty":"7911712696346731","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7911712696346731","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"7911712696346731","readDifferentFirstParty":"Error: IDBFactory.open() called in an invalid security context","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"Error: Can't find variable: SharedWorker","readDifferentFirstParty":"Error: Can't find variable: SharedWorker","passed":false,"testFailed":true},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7911712696346731","readDifferentFirstParty":"7911712696346731","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"Error: Can't find variable: BroadcastChannel","readDifferentFirstParty":"Error: Can't find variable: BroadcastChannel","passed":false,"testFailed":true},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:53.295759+00:00","readDifferentFirstParty":"2020-05-03T07:28:54.133378+00:00","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:52 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:54 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"7911712696346731","readDifferentFirstParty":"Error: undefined is not an object (evaluating 'cacheKeys[0].url')","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:50.312Z"},{"browser":"brave","driverType":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"81.0.4044.129","chrome":{"chromedriverVersion":"81.0.4044.69 (6813546031a4bc83f717a2ef7cd4ac6ec1199132-refs/branch-heads/4044@{#776})","userDataDir":"/var/folders/6m/3l4c2dbs7bs4kfdvdd1hv8640000gn/T/.com.google.Chrome.FjMZ78"},"goog:chromeOptions":{"debuggerAddress":"localhost:60401"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"mac os x","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"Intl.Collator().resolvedOptions().locale":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.DateTimeFormat().resolvedOptions().locale":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"Intl.NumberFormat().resolvedOptions().locale":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"new Intl.PluralRules().resolvedOptions().locale":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"navigator.language":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true},"navigator.languages.toString()":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":291.6499999992084,"desired_value":200,"passed":false},"Performance.prototype.now.apply(performance)":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":291.69999999976426,"desired_value":200,"passed":false},"date.getDate()":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"date.getDay()":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"date.getFullYear()":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"date.getHours()":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"date.getMilliseconds()":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":77,"desired_value":77,"passed":true},"date.getMinutes()":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"date.getMonth()":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"date.getSeconds()":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":56,"desired_value":56,"passed":true},"Date.prototype.getDate.call(date)":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true},"Date.prototype.getDay.call(date)":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true},"Date.prototype.getFullYear.call(date)":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true},"Date.prototype.getHours.call(date)":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false},"Date.prototype.getMilliseconds.call(date)":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":77,"desired_value":77,"passed":true},"Date.prototype.getMinutes.call(date)":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true},"Date.prototype.getMonth.call(date)":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true},"Date.prototype.getSeconds.call(date)":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":56,"desired_value":56,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":92.02999999870372,"desired_value":0,"passed":false},"Intl.Collator().resolvedOptions().locale [Worker]":{"expression":"Intl.Collator().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.DateTimeFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.DateTimeFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"Intl.NumberFormat().resolvedOptions().locale [Worker]":{"expression":"Intl.NumberFormat().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"new Intl.PluralRules().resolvedOptions().locale [Worker]":{"expression":"new Intl.PluralRules().resolvedOptions().locale","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"navigator.language [Worker]":{"expression":"navigator.language","spoof_expression":"\"en-US\"","actual_value":"en-US","desired_value":"en-US","passed":true,"worker":true},"navigator.languages.toString() [Worker]":{"expression":"navigator.languages.toString()","spoof_expression":"\"en-US,en\"","actual_value":"en-US,en","desired_value":"en-US,en","passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.590000001073349,"desired_value":0,"passed":false,"worker":true},"Performance.prototype.now.apply(performance) [Worker]":{"expression":"Performance.prototype.now.apply(performance)","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.630000000062864,"desired_value":0,"passed":false,"worker":true},"date.getDate() [Worker]":{"expression":"date.getDate()","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"date.getDay() [Worker]":{"expression":"date.getDay()","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"date.getFullYear() [Worker]":{"expression":"date.getFullYear()","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"date.getHours() [Worker]":{"expression":"date.getHours()","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"date.getMilliseconds() [Worker]":{"expression":"date.getMilliseconds()","spoof_expression":"date.getUTCMilliseconds()","actual_value":101,"desired_value":101,"passed":true,"worker":true},"date.getMinutes() [Worker]":{"expression":"date.getMinutes()","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"date.getMonth() [Worker]":{"expression":"date.getMonth()","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"date.getSeconds() [Worker]":{"expression":"date.getSeconds()","spoof_expression":"date.getUTCSeconds()","actual_value":56,"desired_value":56,"passed":true,"worker":true},"Date.prototype.getDate.call(date) [Worker]":{"expression":"Date.prototype.getDate.call(date)","spoof_expression":"date.getUTCDate()","actual_value":3,"desired_value":3,"passed":true,"worker":true},"Date.prototype.getDay.call(date) [Worker]":{"expression":"Date.prototype.getDay.call(date)","spoof_expression":"date.getUTCDay()","actual_value":0,"desired_value":0,"passed":true,"worker":true},"Date.prototype.getFullYear.call(date) [Worker]":{"expression":"Date.prototype.getFullYear.call(date)","spoof_expression":"date.getUTCFullYear()","actual_value":2020,"desired_value":2020,"passed":true,"worker":true},"Date.prototype.getHours.call(date) [Worker]":{"expression":"Date.prototype.getHours.call(date)","spoof_expression":"date.getUTCHours()","actual_value":0,"desired_value":7,"passed":false,"worker":true},"Date.prototype.getMilliseconds.call(date) [Worker]":{"expression":"Date.prototype.getMilliseconds.call(date)","spoof_expression":"date.getUTCMilliseconds()","actual_value":101,"desired_value":101,"passed":true,"worker":true},"Date.prototype.getMinutes.call(date) [Worker]":{"expression":"Date.prototype.getMinutes.call(date)","spoof_expression":"date.getUTCMinutes()","actual_value":28,"desired_value":28,"passed":true,"worker":true},"Date.prototype.getMonth.call(date) [Worker]":{"expression":"Date.prototype.getMonth.call(date)","spoof_expression":"date.getUTCMonth()","actual_value":4,"desired_value":4,"passed":true,"worker":true},"Date.prototype.getSeconds.call(date) [Worker]":{"expression":"Date.prototype.getSeconds.call(date)","spoof_expression":"date.getUTCSeconds()","actual_value":56,"desired_value":56,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":22,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":45,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1200,"desired_value":1200,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":833,"desired_value":714,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":2,"desired_value":1,"passed":false},"navigator.buildID":{"expression":"navigator.buildID","spoof_expression":"\"20100101\"","desired_value":"20100101","passed":false},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype":{"expression":"Object.getPrototypeOf(navigator.plugins) === PluginArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype":{"expression":"Object.getPrototypeOf(navigator.mimeTypes) === MimeTypeArray.prototype","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"Object.keys(navigator.mimeTypes).length":{"expression":"Object.keys(navigator.mimeTypes).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Object.keys(navigator.plugins).length":{"expression":"Object.keys(navigator.plugins).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.mimeTypes[0]":{"expression":"navigator.mimeTypes[0]","actual_value":{},"passed":false},"navigator.plugins[0]":{"expression":"navigator.plugins[0]","actual_value":{"0":{}},"passed":false},"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"plugins\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length":{"expression":"Navigator.prototype.__lookupGetter__(\"mimeTypes\").call(navigator).length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":900,"desired_value":714,"passed":false},"Screen.prototype.__lookupGetter__(\"width\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"width\").apply(screen)","spoof_expression":"innerWidth","actual_value":1440,"desired_value":1200,"passed":false},"Screen.prototype.__lookupGetter__(\"height\").apply(screen)":{"expression":"Screen.prototype.__lookupGetter__(\"height\").apply(screen)","spoof_expression":"innerHeight","actual_value":900,"desired_value":714,"passed":false},"performance.timing.connectEnd":{"expression":"performance.timing.connectEnd","spoof_expression":0,"actual_value":1588490935989,"desired_value":0,"passed":false},"performance.timing.connectStart":{"expression":"performance.timing.connectStart","spoof_expression":0,"actual_value":1588490935942,"desired_value":0,"passed":false},"performance.timing.domComplete":{"expression":"performance.timing.domComplete","spoof_expression":0,"actual_value":1588490936092,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventEnd":{"expression":"performance.timing.domContentLoadedEventEnd","spoof_expression":0,"actual_value":1588490936091,"desired_value":0,"passed":false},"performance.timing.domContentLoadedEventStart":{"expression":"performance.timing.domContentLoadedEventStart","spoof_expression":0,"actual_value":1588490936091,"desired_value":0,"passed":false},"performance.timing.domInteractive":{"expression":"performance.timing.domInteractive","spoof_expression":0,"actual_value":1588490936091,"desired_value":0,"passed":false},"performance.timing.domLoading":{"expression":"performance.timing.domLoading","spoof_expression":0,"actual_value":1588490936021,"desired_value":0,"passed":false},"performance.timing.domainLookupEnd":{"expression":"performance.timing.domainLookupEnd","spoof_expression":0,"actual_value":1588490935942,"desired_value":0,"passed":false},"performance.timing.domainLookupStart":{"expression":"performance.timing.domainLookupStart","spoof_expression":0,"actual_value":1588490935927,"desired_value":0,"passed":false},"performance.timing.fetchStart":{"expression":"performance.timing.fetchStart","spoof_expression":0,"actual_value":1588490935926,"desired_value":0,"passed":false},"performance.timing.loadEventEnd":{"expression":"performance.timing.loadEventEnd","spoof_expression":0,"actual_value":1588490936092,"desired_value":0,"passed":false},"performance.timing.loadEventStart":{"expression":"performance.timing.loadEventStart","spoof_expression":0,"actual_value":1588490936092,"desired_value":0,"passed":false},"performance.timing.navigationStart":{"expression":"performance.timing.navigationStart","spoof_expression":0,"actual_value":1588490935797,"desired_value":0,"passed":false},"performance.timing.redirectEnd":{"expression":"performance.timing.redirectEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.redirectStart":{"expression":"performance.timing.redirectStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.requestStart":{"expression":"performance.timing.requestStart","spoof_expression":0,"actual_value":1588490935990,"desired_value":0,"passed":false},"performance.timing.responseEnd":{"expression":"performance.timing.responseEnd","spoof_expression":0,"actual_value":1588490936008,"desired_value":0,"passed":false},"performance.timing.responseStart":{"expression":"performance.timing.responseStart","spoof_expression":0,"actual_value":1588490936008,"desired_value":0,"passed":false},"performance.timing.secureConnectionStart":{"expression":"performance.timing.secureConnectionStart","spoof_expression":0,"actual_value":1588490935960,"desired_value":0,"passed":false},"performance.timing.unloadEventEnd":{"expression":"performance.timing.unloadEventEnd","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"performance.timing.unloadEventStart":{"expression":"performance.timing.unloadEventStart","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":5.914999999004067,"desired_value":0,"passed":false}},"tor":{"TorNetworkUse":{"IPAddress":"2600:8802:2200:14e:d473:46ba:1143:26ba","Location":"Irvine, CA, United States","Hostname":"2600:8802:2200:14e:d473:46ba:1143:26ba","ISP":"Cox Communications","TorExit":false,"CountryCode":"US","passed":false}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret};expires=${expiry.toUTCString()}`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"41290887557553524","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"41290887557553524","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      }\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"41290887557553524","passed":false,"testFailed":false},"fetch_caching":{"write":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"reload\"});\n      let json = await response.json();\n      return {\"secret\": json[\"utc_datetime\"]};\n    }","read":"async () => {\n      let response = await fetch(\"https://worldtimeapi.org/api/timezone/etc/utc\",\n                                 {cache: \"force-cache\"});\n      let json = await response.json();\n      return json[\"utc_datetime\"];\n    }","readSameFirstParty":"2020-05-03T07:28:57.589588+00:00","readDifferentFirstParty":"2020-05-03T07:28:57.589588+00:00","passed":false,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Sun, 03 May 2020 07:28:57 GMT","readDifferentFirstParty":"Sun, 03 May 2020 07:28:57 GMT","passed":false,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"image\", key);\n      img.src = address;\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"41290887557553524","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      return key;\n    }","read":"async (key) => {\n      window.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      });\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"","passed":true,"testFailed":false}}},"timeStarted":"2020-05-03T07:28:55.375Z"}],"git":"501240f1b68d8ce4f2e1269ea91da647886ece5e","timeStarted":"2020-05-03T07:28:13.811Z","timeStopped":"2020-05-03T07:29:00.528Z"}