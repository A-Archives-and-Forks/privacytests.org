{"all_tests":[{"browser":"firefox","capabilities":{"moz:profile":"C:\\Windows\\proxy\\rust_mozprofileY1QmcK","moz:geckodriverVersion":"0.29.1","timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"pageLoadStrategy":"normal","unhandledPromptBehavior":"dismiss and notify","strictFileInteractability":false,"moz:headless":false,"proxy":{},"moz:accessibilityChecks":false,"moz:useNonSpecCompliantPointerOrigin":false,"acceptInsecureCerts":false,"browserVersion":"91.0","moz:shutdownTimeout":60000,"platformVersion":"10.0","moz:processID":7612,"browserName":"firefox","moz:buildID":"20210804193234","platformName":"windows","setWindowRect":true,"moz:webdriverClick":true,"webdriver.remote.sessionid":"cf5fa2e91d9eaed47ec004d9a6d7313b0789b6e4"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":407,"desired_value":400,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":7,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":31,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":31,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1040,"desired_value":1024,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":744,"desired_value":643,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":643,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":48,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:22:39 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:22:44 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"2639175704376635","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"547215afcd8e52936472b82c42a53d58bbe937894306c800b82fa5f89cf45a1c","readDifferentFirstParty":"7ce22163edffaae8ce3dab54ba25aff57a0be778500ba7ff10146f278de4be4a","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"2639175704376635","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"07918685675722137","readDifferentFirstParty":"07918685675722137","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"07918685675722137","readDifferentFirstParty":"07918685675722137","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"07918685675722137","readDifferentFirstParty":"07918685675722137","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7078692777491626","passed":false},"gclid":{"value":"7078692777491626","passed":false},"msclkid":{"value":"7078692777491626","passed":false},"mc_eid":{"value":"7078692777491626","passed":false},"dclid":{"value":"7078692777491626","passed":false},"oly_anon_id":{"value":"7078692777491626","passed":false},"oly_enc_id":{"value":"7078692777491626","passed":false},"_openstat":{"value":"7078692777491626","passed":false},"vero_conv":{"value":"7078692777491626","passed":false},"vero_id":{"value":"7078692777491626","passed":false},"wickedid":{"value":"7078692777491626","passed":false},"yclid":{"value":"7078692777491626","passed":false},"__s":{"value":"7078692777491626","passed":false},"rb_clickid":{"value":"7078692777491626","passed":false},"s_cid":{"value":"7078692777491626","passed":false},"ml_subscriber":{"value":"7078692777491626","passed":false},"ml_subscriber_hash":{"value":"7078692777491626","passed":false},"_hsenc":{"value":"7078692777491626","passed":false},"__hssc":{"value":"7078692777491626","passed":false},"__hstc":{"value":"7078692777491626","passed":false},"__hsfp":{"value":"7078692777491626","passed":false},"hsCtaTracking":{"value":"7078692777491626","passed":false},"mkt_tok":{"value":"7078692777491626","passed":false},"igshid":{"value":"7078692777491626","passed":false}}},"timeStarted":"2021-09-08T22:22:27.639Z"},{"browser":"firefox","capabilities":{"moz:profile":"C:\\Windows\\proxy\\rust_mozprofileuMPvwg","moz:geckodriverVersion":"0.29.1","timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"pageLoadStrategy":"normal","unhandledPromptBehavior":"dismiss and notify","strictFileInteractability":false,"moz:headless":false,"proxy":{},"moz:accessibilityChecks":false,"moz:useNonSpecCompliantPointerOrigin":false,"acceptInsecureCerts":false,"browserVersion":"91.0","moz:shutdownTimeout":60000,"platformVersion":"10.0","moz:processID":8396,"browserName":"firefox","moz:buildID":"20210804193234","platformName":"windows","setWindowRect":true,"moz:webdriverClick":true,"webdriver.remote.sessionid":"622d239faa88e57388387e16d46181192e7bb1fe"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":337,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":37,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":36,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":37,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":-8,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1040,"desired_value":1024,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":744,"desired_value":643,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":643,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":81,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":true,"upgraded":true},"Upgradable link":{"passed":true,"upgraded":true},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"7111265768749637","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"7111265768749637","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","testFailed":true},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"7111265768749637","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"7111265768749637","readDifferentFirstParty":"7111265768749637","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"7111265768749637","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:23:29 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:23:38 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":true},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"9f0adadfa716f035cb69af1f2cca1c0ae583b2ff19164ed3da1f038cf85b1928","readDifferentFirstParty":"9d164162c7911a66ca3928895b091372e5da6d692a6aed9469e64bf91dcf09a1","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"2","readDifferentFirstParty":"3","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"7111265768749637","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":true}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"7019091474555752","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"7019091474555752","readDifferentFirstParty":"7019091474555752","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7978404506637997","passed":false},"gclid":{"value":"7978404506637997","passed":false},"msclkid":{"value":"7978404506637997","passed":false},"mc_eid":{"value":"7978404506637997","passed":false},"dclid":{"value":"7978404506637997","passed":false},"oly_anon_id":{"value":"7978404506637997","passed":false},"oly_enc_id":{"value":"7978404506637997","passed":false},"_openstat":{"value":"7978404506637997","passed":false},"vero_conv":{"value":"7978404506637997","passed":false},"vero_id":{"value":"7978404506637997","passed":false},"wickedid":{"value":"7978404506637997","passed":false},"yclid":{"value":"7978404506637997","passed":false},"__s":{"value":"7978404506637997","passed":false},"rb_clickid":{"value":"7978404506637997","passed":false},"s_cid":{"value":"7978404506637997","passed":false},"ml_subscriber":{"value":"7978404506637997","passed":false},"ml_subscriber_hash":{"value":"7978404506637997","passed":false},"_hsenc":{"value":"7978404506637997","passed":false},"__hssc":{"value":"7978404506637997","passed":false},"__hstc":{"value":"7978404506637997","passed":false},"__hsfp":{"value":"7978404506637997","passed":false},"hsCtaTracking":{"value":"7978404506637997","passed":false},"mkt_tok":{"value":"7978404506637997","passed":false},"igshid":{"value":"7978404506637997","passed":false}}},"timeStarted":"2021-09-08T22:23:16.613Z","incognito":true},{"browser":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.107","chrome":{"chromedriverVersion":"92.0.4515.43 (8c61b7e2989f2990d42f859cac71319137787cce-refs/branch-heads/4515@{#306})","userDataDir":"C:\\Windows\\proxy\\scoped_dir9436_765959745"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"1e1af0a93d4339cde8c2c6036a0d53bc6b76fa96"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":515.9000000000233,"desired_value":500,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":16,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":10.79999999993015,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":576,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":576,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":37.59999999997672,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:24:09 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:24:18 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-8kFQ10GHV7HnhIgsAKZGAC8tdMI\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"3d9fd97b02ef5bbb515d65bd705b7c7778fb159b81983ed56c22c5aaa25d625f","readDifferentFirstParty":"64c1b3b3f52eac42552e27fc3961d751783206f5e387fe3a4b469a1c8d117810","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"9946774845812172","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9946774845812172","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"24318457248804726","readDifferentFirstParty":"24318457248804726","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"24318457248804726","readDifferentFirstParty":"24318457248804726","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"24318457248804726","readDifferentFirstParty":"24318457248804726","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"6333052379820687","passed":false},"gclid":{"value":"6333052379820687","passed":false},"msclkid":{"value":"6333052379820687","passed":false},"mc_eid":{"value":"6333052379820687","passed":false},"dclid":{"value":"6333052379820687","passed":false},"oly_anon_id":{"value":"6333052379820687","passed":false},"oly_enc_id":{"value":"6333052379820687","passed":false},"_openstat":{"value":"6333052379820687","passed":false},"vero_conv":{"value":"6333052379820687","passed":false},"vero_id":{"value":"6333052379820687","passed":false},"wickedid":{"value":"6333052379820687","passed":false},"yclid":{"value":"6333052379820687","passed":false},"__s":{"value":"6333052379820687","passed":false},"rb_clickid":{"value":"6333052379820687","passed":false},"s_cid":{"value":"6333052379820687","passed":false},"ml_subscriber":{"value":"6333052379820687","passed":false},"ml_subscriber_hash":{"value":"6333052379820687","passed":false},"_hsenc":{"value":"6333052379820687","passed":false},"__hssc":{"value":"6333052379820687","passed":false},"__hstc":{"value":"6333052379820687","passed":false},"__hsfp":{"value":"6333052379820687","passed":false},"hsCtaTracking":{"value":"6333052379820687","passed":false},"mkt_tok":{"value":"6333052379820687","passed":false},"igshid":{"value":"6333052379820687","passed":false}}},"timeStarted":"2021-09-08T22:23:58.333Z"},{"browser":"chrome","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.107","chrome":{"chromedriverVersion":"92.0.4515.43 (8c61b7e2989f2990d42f859cac71319137787cce-refs/branch-heads/4515@{#306})","userDataDir":"C:\\Windows\\proxy\\scoped_dir10428_1811640154"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"574644b40085129ce1923021e845e2e10f6ab2b8"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":178.19999999995343,"desired_value":100,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":78.5,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":9.399999999906868,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":576,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":576,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":3.699999999953434,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9917384840151584","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"9917384840151584","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"9917384840151584","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:24:49 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:24:57 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-Nfvqe7BoFjS3kNgOdgl5hE4n+TE\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"950d12a6e7d0c346cfc2f0f4dde7840a5ed9cc69f03c8380b8b2a3b3d4c3406b","readDifferentFirstParty":"2748c166bd69066605550979fb632bd9cb34c4383f91450a953a7afbe7500f73","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"9917384840151584","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9917384840151584","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"3605690018970893","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"3605690018970893","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"3605690018970893","readDifferentFirstParty":"3605690018970893","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"9011870953703502","passed":false},"gclid":{"value":"9011870953703502","passed":false},"msclkid":{"value":"9011870953703502","passed":false},"mc_eid":{"value":"9011870953703502","passed":false},"dclid":{"value":"9011870953703502","passed":false},"oly_anon_id":{"value":"9011870953703502","passed":false},"oly_enc_id":{"value":"9011870953703502","passed":false},"_openstat":{"value":"9011870953703502","passed":false},"vero_conv":{"value":"9011870953703502","passed":false},"vero_id":{"value":"9011870953703502","passed":false},"wickedid":{"value":"9011870953703502","passed":false},"yclid":{"value":"9011870953703502","passed":false},"__s":{"value":"9011870953703502","passed":false},"rb_clickid":{"value":"9011870953703502","passed":false},"s_cid":{"value":"9011870953703502","passed":false},"ml_subscriber":{"value":"9011870953703502","passed":false},"ml_subscriber_hash":{"value":"9011870953703502","passed":false},"_hsenc":{"value":"9011870953703502","passed":false},"__hssc":{"value":"9011870953703502","passed":false},"__hstc":{"value":"9011870953703502","passed":false},"__hsfp":{"value":"9011870953703502","passed":false},"hsCtaTracking":{"value":"9011870953703502","passed":false},"mkt_tok":{"value":"9011870953703502","passed":false},"igshid":{"value":"9011870953703502","passed":false}}},"timeStarted":"2021-09-08T22:24:38.472Z","incognito":true},{"browser":"edge","capabilities":{"acceptInsecureCerts":false,"browserName":"msedge","browserVersion":"92.0.902.55","ms:edgeOptions":{"debuggerAddress":"localhost:9222"},"msedge":{"msedgedriverVersion":"92.0.902.55 (2f31ea24c029d582f5472682b25153751b8021b3)","userDataDir":"C:\\Windows\\proxy\\scoped_dir5704_847654551"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"a1a45a972df77ddcaad963d141cc5cde129fcd94"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":311.69999999995343,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":11.899999999906868,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":25.5,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":577,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":577,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":83.0999999998603,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:25:26 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:25:35 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-UJiynPfA8sKki57KmloDRNG4YKc\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"da033168adf47f02c30788a15aa2495652986aa8247f3713a39cfae8b55939d5","readDifferentFirstParty":"48a2a4c76b89db3f9634dccf37095028940b5b8c90a6b761e72f13b05b181378","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"4257639451042392","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"4257639451042392","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"6312210764101442","readDifferentFirstParty":"6312210764101442","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"6312210764101442","readDifferentFirstParty":"6312210764101442","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"6312210764101442","readDifferentFirstParty":"6312210764101442","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7683570430854405","passed":false},"gclid":{"value":"7683570430854405","passed":false},"msclkid":{"value":"7683570430854405","passed":false},"mc_eid":{"value":"7683570430854405","passed":false},"dclid":{"value":"7683570430854405","passed":false},"oly_anon_id":{"value":"7683570430854405","passed":false},"oly_enc_id":{"value":"7683570430854405","passed":false},"_openstat":{"value":"7683570430854405","passed":false},"vero_conv":{"value":"7683570430854405","passed":false},"vero_id":{"value":"7683570430854405","passed":false},"wickedid":{"value":"7683570430854405","passed":false},"yclid":{"value":"7683570430854405","passed":false},"__s":{"value":"7683570430854405","passed":false},"rb_clickid":{"value":"7683570430854405","passed":false},"s_cid":{"value":"7683570430854405","passed":false},"ml_subscriber":{"value":"7683570430854405","passed":false},"ml_subscriber_hash":{"value":"7683570430854405","passed":false},"_hsenc":{"value":"7683570430854405","passed":false},"__hssc":{"value":"7683570430854405","passed":false},"__hstc":{"value":"7683570430854405","passed":false},"__hsfp":{"value":"7683570430854405","passed":false},"hsCtaTracking":{"value":"7683570430854405","passed":false},"mkt_tok":{"value":"7683570430854405","passed":false},"igshid":{"value":"7683570430854405","passed":false}}},"timeStarted":"2021-09-08T22:25:16.258Z"},{"browser":"edge","capabilities":{"acceptInsecureCerts":false,"browserName":"msedge","browserVersion":"92.0.902.55","ms:edgeOptions":{"debuggerAddress":"localhost:9222"},"msedge":{"msedgedriverVersion":"92.0.902.55 (2f31ea24c029d582f5472682b25153751b8021b3)","userDataDir":"C:\\Windows\\proxy\\scoped_dir4728_345270254"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true,"webdriver.remote.sessionid":"35e226825594b7e920f100750c69daad7f491374","platform":"WINDOWS"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":236.69999999995343,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":37.59999999997672,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":17.099999999976717,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1004,"desired_value":988,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":708,"desired_value":577,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":988,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":577,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":87.40000000002328,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:26:05 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:26:14 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-mcEfCpIlYsi1kdAcZwGnhLZAjxk\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"d232cb1b1b876dc3a09d739623c7db083d006aad9ccf89139151e227341a3d10","readDifferentFirstParty":"3296ed738b90e9afbdb8e6d5817ebc9647a13ea7ae184b140574d5c7e668e7ff","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"6439752290007545","readDifferentFirstParty":"6439752290007545","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"9467606033255482","readDifferentFirstParty":"9467606033255482","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"9467606033255482","readDifferentFirstParty":"9467606033255482","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"9467606033255482","readDifferentFirstParty":"9467606033255482","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"1031375289357701","passed":false},"gclid":{"value":"1031375289357701","passed":false},"msclkid":{"value":"1031375289357701","passed":false},"mc_eid":{"value":"1031375289357701","passed":false},"dclid":{"value":"1031375289357701","passed":false},"oly_anon_id":{"value":"1031375289357701","passed":false},"oly_enc_id":{"value":"1031375289357701","passed":false},"_openstat":{"value":"1031375289357701","passed":false},"vero_conv":{"value":"1031375289357701","passed":false},"vero_id":{"value":"1031375289357701","passed":false},"wickedid":{"value":"1031375289357701","passed":false},"yclid":{"value":"1031375289357701","passed":false},"__s":{"value":"1031375289357701","passed":false},"rb_clickid":{"value":"1031375289357701","passed":false},"s_cid":{"value":"1031375289357701","passed":false},"ml_subscriber":{"value":"1031375289357701","passed":false},"ml_subscriber_hash":{"value":"1031375289357701","passed":false},"_hsenc":{"value":"1031375289357701","passed":false},"__hssc":{"value":"1031375289357701","passed":false},"__hstc":{"value":"1031375289357701","passed":false},"__hsfp":{"value":"1031375289357701","passed":false},"hsCtaTracking":{"value":"1031375289357701","passed":false},"mkt_tok":{"value":"1031375289357701","passed":false},"igshid":{"value":"1031375289357701","passed":false}}},"timeStarted":"2021-09-08T22:25:54.231Z","incognito":true},{"browser":"opera","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.6AJLUH"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":285.29999999701977,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":85.79999999701977,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":320,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":204,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1920,"desired_value":1878,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1059,"desired_value":949,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1878,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":949,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":6.9000000059604645,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:26:31 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:26:36 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"19-a3epKzUa03kSslgVEemfmz0ian4\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"22bc2397da242e10cc9eff2dae12cf78ea0d472d0dd4b49b75c809373d4e459d","readDifferentFirstParty":"eb1c40c924e1d045e7028ce3f2d3468054d9b71346f50000f1a965a0c0067bf4","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"72771135831659","readDifferentFirstParty":"72771135831659","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"6147356319478552","readDifferentFirstParty":"6147356319478552","passed":false,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"6147356319478552","readDifferentFirstParty":"6147356319478552","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"6147356319478552","readDifferentFirstParty":"6147356319478552","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"30166511711631205","passed":false},"gclid":{"value":"30166511711631205","passed":false},"msclkid":{"value":"30166511711631205","passed":false},"mc_eid":{"value":"30166511711631205","passed":false},"dclid":{"value":"30166511711631205","passed":false},"oly_anon_id":{"value":"30166511711631205","passed":false},"oly_enc_id":{"value":"30166511711631205","passed":false},"_openstat":{"value":"30166511711631205","passed":false},"vero_conv":{"value":"30166511711631205","passed":false},"vero_id":{"value":"30166511711631205","passed":false},"wickedid":{"value":"30166511711631205","passed":false},"yclid":{"value":"30166511711631205","passed":false},"__s":{"value":"30166511711631205","passed":false},"rb_clickid":{"value":"30166511711631205","passed":false},"s_cid":{"value":"30166511711631205","passed":false},"ml_subscriber":{"value":"30166511711631205","passed":false},"ml_subscriber_hash":{"value":"30166511711631205","passed":false},"_hsenc":{"value":"30166511711631205","passed":false},"__hssc":{"value":"30166511711631205","passed":false},"__hstc":{"value":"30166511711631205","passed":false},"__hsfp":{"value":"30166511711631205","passed":false},"hsCtaTracking":{"value":"30166511711631205","passed":false},"mkt_tok":{"value":"30166511711631205","passed":false},"igshid":{"value":"30166511711631205","passed":false}}},"timeStarted":"2021-09-08T22:26:26.502Z"},{"browser":"opera","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"92.0.4515.159","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.8Ck4NX"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":264.09999999403954,"desired_value":200,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":64.5,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":8,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":6.700000002980232,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":320,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":204,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1920,"desired_value":1878,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1059,"desired_value":949,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1878,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":949,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":85.79999999701977,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"3961542495754449","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"3961542495754449","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"3961542495754449","passed":false,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:26:48 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:26:55 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"1","passed":false,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-Qp5l9iF9LeKHXlb3sXhH8hLLtC4\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"d3f2cb1a51390f33ccaad21e30558967fc427b7fc943c6fb5ca858b832454a13","readDifferentFirstParty":"348c7aef20e3535e5345b093846a2e4c89a1ae0a8054ef97a9ea47dab33b6726","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"3961542495754449","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"3961542495754449","readDifferentFirstParty":"3961542495754449","passed":false,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"7539616717549815","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"7539616717549815","readDifferentFirstParty":"Error: Failed to read the 'sessionStorage' property from 'Window': Access is denied for this document.","passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"7539616717549815","readDifferentFirstParty":"7539616717549815","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"7459139947852018","passed":false},"gclid":{"value":"7459139947852018","passed":false},"msclkid":{"value":"7459139947852018","passed":false},"mc_eid":{"value":"7459139947852018","passed":false},"dclid":{"value":"7459139947852018","passed":false},"oly_anon_id":{"value":"7459139947852018","passed":false},"oly_enc_id":{"value":"7459139947852018","passed":false},"_openstat":{"value":"7459139947852018","passed":false},"vero_conv":{"value":"7459139947852018","passed":false},"vero_id":{"value":"7459139947852018","passed":false},"wickedid":{"value":"7459139947852018","passed":false},"yclid":{"value":"7459139947852018","passed":false},"__s":{"value":"7459139947852018","passed":false},"rb_clickid":{"value":"7459139947852018","passed":false},"s_cid":{"value":"7459139947852018","passed":false},"ml_subscriber":{"value":"7459139947852018","passed":false},"ml_subscriber_hash":{"value":"7459139947852018","passed":false},"_hsenc":{"value":"7459139947852018","passed":false},"__hssc":{"value":"7459139947852018","passed":false},"__hstc":{"value":"7459139947852018","passed":false},"__hsfp":{"value":"7459139947852018","passed":false},"hsCtaTracking":{"value":"7459139947852018","passed":false},"mkt_tok":{"value":"7459139947852018","passed":false},"igshid":{"value":"7459139947852018","passed":false}}},"timeStarted":"2021-09-08T22:26:43.977Z","incognito":true},{"browser":"safari","capabilities":{"safari:platformVersion":"11.5.2","safari:automaticInspection":false,"webkit:WebRTC":{"DisableICECandidateFiltering":false,"DisableInsecureMediaCapture":false},"browserVersion":"14.1.2","strictFileInteractability":false,"browserName":"Safari","safari:useSimulator":false,"safari:automaticProfiling":false,"safari:platformBuildVersion":"20G95","acceptInsecureCerts":false,"setWindowRect":true,"platformName":"macOS","safari:diagnose":false,"webdriver.remote.sessionid":"af32baef5b7fff383d9e93acec2ddb5d9965a9bd"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":609,"desired_value":600,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":9,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":25,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":25,"desired_value":0,"passed":false,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":25,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":743,"desired_value":691,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":3,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":1,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1024,"desired_value":1024,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":768,"desired_value":691,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":47,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"9424972006542671","readDifferentFirstParty":"9424972006542671","passed":false,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"9424972006542671","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"9424972006542671","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"Error: Can't find variable: SharedWorker","readDifferentFirstParty":"Error: Can't find variable: SharedWorker","testFailed":true},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","testFailed":true},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"Error: Can't find variable: BroadcastChannel","readDifferentFirstParty":"Error: Can't find variable: BroadcastChannel","testFailed":true},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"3","readDifferentFirstParty":"4","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:27:38 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:28:02 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"3","readDifferentFirstParty":"4","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"3","readDifferentFirstParty":"4","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"9424972006542671","readDifferentFirstParty":"Error: undefined is not an object (evaluating 'cacheKeys[0].url')","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"Error: favicons never requested","readDifferentFirstParty":"Error: favicons never requested","testFailed":true},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"3","readDifferentFirstParty":"4","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"3","readDifferentFirstParty":"4","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","testFailed":true},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"Error: image load failed","readDifferentFirstParty":"Error: image load failed","testFailed":true},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"3a695bed7f46dd8bc7db5f897ded41a3e57b28a7d3e1582228ceac2cf71796c2","readDifferentFirstParty":"886636ce9785d7a669ccfa9d2d70eed5b3c8450e9531e995983e82afc5bf1cf4","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"Error: prefetch isn't being used","readDifferentFirstParty":"Error: prefetch isn't being used","testFailed":true},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: Web SQL is deprecated","readDifferentFirstParty":"Error: Web SQL is deprecated","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"9424972006542671","readDifferentFirstParty":"9424972006542671","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"7348129691960363","readDifferentFirstParty":"","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"7348129691960363","readDifferentFirstParty":"7348129691960363","passed":false,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"7348129691960363","readDifferentFirstParty":"7348129691960363","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"3317971349083726","passed":false},"gclid":{"value":"3317971349083726","passed":false},"msclkid":{"value":"3317971349083726","passed":false},"mc_eid":{"value":"3317971349083726","passed":false},"dclid":{"value":"3317971349083726","passed":false},"oly_anon_id":{"value":"3317971349083726","passed":false},"oly_enc_id":{"value":"3317971349083726","passed":false},"_openstat":{"value":"3317971349083726","passed":false},"vero_conv":{"value":"3317971349083726","passed":false},"vero_id":{"value":"3317971349083726","passed":false},"wickedid":{"value":"3317971349083726","passed":false},"yclid":{"value":"3317971349083726","passed":false},"__s":{"value":"3317971349083726","passed":false},"rb_clickid":{"value":"3317971349083726","passed":false},"s_cid":{"value":"3317971349083726","passed":false},"ml_subscriber":{"value":"3317971349083726","passed":false},"ml_subscriber_hash":{"value":"3317971349083726","passed":false},"_hsenc":{"value":"3317971349083726","passed":false},"__hssc":{"value":"3317971349083726","passed":false},"__hstc":{"value":"3317971349083726","passed":false},"__hsfp":{"value":"3317971349083726","passed":false},"hsCtaTracking":{"value":"3317971349083726","passed":false},"mkt_tok":{"value":"3317971349083726","passed":false},"igshid":{"value":"3317971349083726","passed":false}}},"timeStarted":"2021-09-08T22:27:07.366Z"},{"browser":"tor browser","capabilities":{"acceptInsecureCerts":false,"browserName":"firefox","browserVersion":"78.13.0","moz:accessibilityChecks":false,"moz:buildID":"20210507060101","moz:geckodriverVersion":"0.29.1","moz:headless":false,"moz:processID":125667,"moz:profile":"/tmp/rust_mozprofileEAweYJ","moz:shutdownTimeout":60000,"moz:useNonSpecCompliantPointerOrigin":false,"moz:webdriverClick":true,"pageLoadStrategy":"normal","platformName":"linux","platformVersion":"5.11.0-16-generic","rotatable":false,"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify"},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":3300,"desired_value":3300,"passed":true},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":2,"desired_value":2,"passed":true,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":0,"desired_value":0,"passed":true,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1000,"desired_value":1000,"passed":true},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":true},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":false,"desired_value":false,"passed":true},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":0,"desired_value":0,"passed":true},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":1000,"desired_value":1000,"passed":true},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1000,"desired_value":1000,"passed":true},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true}},"misc":{"Tor enabled":{"IsTorExit":true,"passed":true},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"passed":false}},"https":{"Upgradable image":{"passed":false,"result":"loaded insecurely"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"8778842726340601","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"8778842726340601","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"Error: A mutation operation was attempted on a database that did not allow mutations.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":true},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"8778842726340601","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"8778842726340601","readDifferentFirstParty":"Error: NetworkError when attempting to fetch resource.","passed":true,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"8778842726340601","readDifferentFirstParty":"Error: The operation is insecure.","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:29:10 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:29:41 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"Error: The operation is insecure.","readDifferentFirstParty":"Error: The operation is insecure.","testFailed":true},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","testFailed":true},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"W/\"1b-dFHYNnzl5/CRGxCXw6rYHyggk4c\"","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"Error: image load failed","passed":true,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"541ce81ecbba33f02604e17ecb644b100db1442273cfbed22654121afe845cd9","readDifferentFirstParty":"3a282957de3638aebfc8bfe59e451e18de02ff0b14b17a660a502422f85412c5","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"1","readDifferentFirstParty":"2","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"Error: window.openDatabase is not a function","readDifferentFirstParty":"Error: window.openDatabase is not a function","testFailed":true},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"8778842726340601","readDifferentFirstParty":"","passed":true,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"Error: navigator.serviceWorker is undefined","readDifferentFirstParty":"Error: navigator.serviceWorker is undefined","testFailed":true}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"6012449477107422","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"6012449477107422","readDifferentFirstParty":"6012449477107422","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"value":"17703918554703368","passed":false},"gclid":{"value":"17703918554703368","passed":false},"msclkid":{"value":"17703918554703368","passed":false},"mc_eid":{"value":"17703918554703368","passed":false},"dclid":{"value":"17703918554703368","passed":false},"oly_anon_id":{"value":"17703918554703368","passed":false},"oly_enc_id":{"value":"17703918554703368","passed":false},"_openstat":{"value":"17703918554703368","passed":false},"vero_conv":{"value":"17703918554703368","passed":false},"vero_id":{"value":"17703918554703368","passed":false},"wickedid":{"value":"17703918554703368","passed":false},"yclid":{"value":"17703918554703368","passed":false},"__s":{"value":"17703918554703368","passed":false},"rb_clickid":{"value":"17703918554703368","passed":false},"s_cid":{"value":"17703918554703368","passed":false},"ml_subscriber":{"value":"17703918554703368","passed":false},"ml_subscriber_hash":{"value":"17703918554703368","passed":false},"_hsenc":{"value":"17703918554703368","passed":false},"__hssc":{"value":"17703918554703368","passed":false},"__hstc":{"value":"17703918554703368","passed":false},"__hsfp":{"value":"17703918554703368","passed":false},"hsCtaTracking":{"value":"17703918554703368","passed":false},"mkt_tok":{"value":"17703918554703368","passed":false},"igshid":{"value":"17703918554703368","passed":false}}},"timeStarted":"2021-09-08T22:28:28.243Z"},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.58","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.35Qv0q"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":356.70000000298023,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":57.20000000298023,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.600000008940697,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":37,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1257,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1393,"desired_value":1216,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1257,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1216,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":0.5,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"sec-gpc":"1","passed":true}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"48284552206104947","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"48284552206104947","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"48284552206104947","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:30:23 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:30:33 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"12377d7a9ddc294bd02088bc6bdacad547eb3ca1f5cff446e2548eb6225ff66d","readDifferentFirstParty":"c5a79b057cee63659d870cdf212144a0b3fc43575e8835cbe0f79dbfcab4f22e","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"48284552206104947","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"48284552206104947","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"4367151525894444","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"4367151525894444","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"4367151525894444","readDifferentFirstParty":"4367151525894444","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"passed":true},"gclid":{"passed":true},"msclkid":{"passed":true},"mc_eid":{"passed":true},"dclid":{"passed":true},"oly_anon_id":{"passed":true},"oly_enc_id":{"passed":true},"_openstat":{"passed":true},"vero_conv":{"passed":true},"vero_id":{"passed":true},"wickedid":{"passed":true},"yclid":{"passed":true},"__s":{"passed":true},"rb_clickid":{"value":"9889019622932269","passed":false},"s_cid":{"value":"9889019622932269","passed":false},"ml_subscriber":{"value":"9889019622932269","passed":false},"ml_subscriber_hash":{"value":"9889019622932269","passed":false},"_hsenc":{"passed":true},"__hssc":{"passed":true},"__hstc":{"passed":true},"__hsfp":{"passed":true},"hsCtaTracking":{"passed":true},"mkt_tok":{"value":"9889019622932269","passed":false},"igshid":{"value":"9889019622932269","passed":false}}},"timeStarted":"2021-09-08T22:30:12.326Z"},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.58","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.nuRBaO"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":374.59999999403954,"desired_value":300,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":75.09999999403954,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.100000008940697,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":37,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1257,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1393,"desired_value":1216,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1257,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1216,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":98.3999999910593,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":false,"passed":false},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"sec-gpc":"1","passed":true}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"5702651753537318","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"5702651753537318","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"5702651753537318","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:30:45 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:30:55 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"8a32f8e4110017dd996e1198fda786a9048fe24ba61314ad5cf614889a13252a","readDifferentFirstParty":"ef6c6139dac884af5aabc8b5f8fb0468b8a865cb3ff1a15788b8d87b0366b43b","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"5702651753537318","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"5702651753537318","readDifferentFirstParty":"","passed":true,"testFailed":false},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"8856564231357176","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"8856564231357176","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"8856564231357176","readDifferentFirstParty":"8856564231357176","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"passed":true},"gclid":{"passed":true},"msclkid":{"passed":true},"mc_eid":{"passed":true},"dclid":{"passed":true},"oly_anon_id":{"passed":true},"oly_enc_id":{"passed":true},"_openstat":{"passed":true},"vero_conv":{"passed":true},"vero_id":{"passed":true},"wickedid":{"passed":true},"yclid":{"passed":true},"__s":{"passed":true},"rb_clickid":{"value":"2165277321635275","passed":false},"s_cid":{"value":"2165277321635275","passed":false},"ml_subscriber":{"value":"2165277321635275","passed":false},"ml_subscriber_hash":{"value":"2165277321635275","passed":false},"_hsenc":{"passed":true},"__hssc":{"passed":true},"__hstc":{"passed":true},"__hsfp":{"passed":true},"hsCtaTracking":{"passed":true},"mkt_tok":{"value":"2165277321635275","passed":false},"igshid":{"value":"2165277321635275","passed":false}}},"timeStarted":"2021-09-08T22:30:40.459Z","incognito":true},{"browser":"brave","capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"93.0.4577.58","chrome":{"chromedriverVersion":"92.0.4515.107 (87a818b10553a07434ea9e2b6dccf3cbe7895134-refs/branch-heads/4515@{#1634})","userDataDir":"/tmp/.com.google.Chrome.kNGNhJ"},"goog:chromeOptions":{"debuggerAddress":"localhost:9222"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"linux","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:virtualAuthenticators":true},"testResults":{"fingerprinting":{"navigator.hardwareConcurrency":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false},"performance.now()":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":39413.79999999702,"desired_value":39400,"passed":false},"new Event(\"test\").timeStamp % 100":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":14.299999997019768,"desired_value":0,"passed":false},"navigator.hardwareConcurrency [Worker]":{"expression":"navigator.hardwareConcurrency","spoof_expression":2,"actual_value":5,"desired_value":2,"passed":false,"worker":true},"performance.now() [Worker]":{"expression":"performance.now()","spoof_expression":"Math.floor(performance.now() / 100) * 100","actual_value":7.200000002980232,"desired_value":0,"passed":false,"worker":true},"new Event(\"test\").timeStamp % 100 [Worker]":{"expression":"new Event(\"test\").timeStamp % 100","spoof_expression":"0","actual_value":0,"desired_value":0,"passed":true,"worker":true},"screenX":{"expression":"screenX","spoof_expression":0,"actual_value":10,"desired_value":0,"passed":false},"screenY":{"expression":"screenY","spoof_expression":0,"actual_value":37,"desired_value":0,"passed":false},"outerWidth":{"expression":"outerWidth","spoof_expression":"innerWidth","actual_value":1265,"desired_value":1257,"passed":false},"outerHeight":{"expression":"outerHeight","spoof_expression":"innerHeight","actual_value":1393,"desired_value":1216,"passed":false},"devicePixelRatio":{"expression":"devicePixelRatio","spoof_expression":1,"actual_value":1,"desired_value":1,"passed":true},"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"":{"expression":"navigator.buildID === undefined || navigator.buildID === \"20181001000000\"","spoof_expression":true,"actual_value":true,"desired_value":true,"passed":true},"navigator.getBattery":{"expression":"navigator.getBattery","passed":false},"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }":{"expression":"try {\n      navigator.getBattery();\n      true;\n    } catch (e) {\n      false;\n   }","spoof_expression":"false","actual_value":true,"desired_value":false,"passed":false},"navigator.mimeTypes.length":{"expression":"navigator.mimeTypes.length","spoof_expression":0,"actual_value":2,"desired_value":0,"passed":false},"navigator.plugins.length":{"expression":"navigator.plugins.length","spoof_expression":0,"actual_value":4,"desired_value":0,"passed":false},"screen.width":{"expression":"screen.width","spoof_expression":"innerWidth","actual_value":2560,"desired_value":1257,"passed":false},"screen.height":{"expression":"screen.height","spoof_expression":"innerHeight","actual_value":1440,"desired_value":1216,"passed":false},"mouseEvent.screenX":{"expression":"mouseEvent.screenX","spoof_expression":"mouseEvent.clientX","actual_value":0,"desired_value":10,"passed":false},"mouseEvent.screenY":{"expression":"mouseEvent.screenY","spoof_expression":"mouseEvent.clientY","actual_value":0,"desired_value":20,"passed":false},"mouseEvent.timeStamp % 100":{"expression":"mouseEvent.timeStamp % 100","spoof_expression":"0","actual_value":37.29999999701977,"desired_value":0,"passed":false}},"misc":{"Tor enabled":{"IsTorExit":true,"passed":true},"DoH enabled":{"cloudflareDoH":false,"nextDoH":false,"passed":false},"GPC enabled":{"sec-gpc":"1","passed":true}},"https":{"Upgradable image":{"passed":true,"result":"upgraded"},"Upgradable script":{"passed":true,"result":"blocked"},"Upgradable address":{"passed":false,"upgraded":false},"Upgradable link":{"passed":false,"upgraded":false},"Insecure website":{"passed":false,"result":"allowed"}},"supercookies":{"cookie":{"write":"(secret) => {\n      let expiry = new Date();\n      expiry.setFullYear(expiry.getFullYear() + 1);\n      document.cookie = `secret=${secret}; SameSite=None; Secure`;\n    }","read":"() => document.cookie ? document.cookie.match(/secret=(\\S+)/)[1] : null","readSameFirstParty":"5502165970659245","readDifferentFirstParty":null,"passed":true,"testFailed":false},"localStorage":{"write":"(secret) => localStorage.setItem(\"secret\", secret)","read":"() => localStorage.getItem(\"secret\")","readSameFirstParty":"5502165970659245","readDifferentFirstParty":null,"passed":true,"testFailed":false},"indexedDB":{"write":"(secret) => IdbKeyVal.set(\"secret\", secret)","read":"() => IdbKeyVal.get(\"secret\")","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: The user denied permission to access the database.","passed":true,"testFailed":false},"SharedWorker":{"write":"(secret) => {\n      let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n      worker.port.start();\n      worker.port.postMessage(secret);\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let worker = new SharedWorker(\"supercookies_sharedworker.js\");\n        worker.port.start();\n        worker.port.postMessage(\"request\");\n        worker.port.onmessage = (e) => resolve(e.data);\n        setTimeout(() => reject(\"no SharedWorker message received\"), 1000);\n      })","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: undefined","passed":true,"testFailed":false},"blob":{"write":"(secret) => URL.createObjectURL(new Blob([secret]))","read":"async (url) => {\n      if (url) {\n        let response = await fetch(url);\n        return response.text();\n      }\n    }","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"5502165970659245","passed":false,"testFailed":false},"BroadcastChannel":{"write":"(secret) => {\n      let bc = new BroadcastChannel(\"secrets\");\n      bc.onmessage = (event) => {\n        if (event.data === \"request\") {\n          bc.postMessage(secret);\n        }\n      };\n    }","read":"() =>\n      new Promise((resolve, reject) => {\n        let bc = new BroadcastChannel(\"secrets\");\n        bc.onmessage = (event) => {\n          if (event.data !== \"request\") {\n            resolve(event.data);\n          }\n        };\n        bc.postMessage(\"request\");\n        setTimeout(() => reject({message: \"no BroadcastChannel message\"}), 3000);\n      })","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: no BroadcastChannel message","passed":true,"testFailed":false},"fetch":{"write":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      return key;\n    }","read":"async (key) => {\n      let response = await fetch(testURI(\"resource\", \"fetch\", key),\n                                 {cache: \"force-cache\"});\n      let countResponse = await fetch(testURI(\"count\", \"fetch\", key),\n                                      {cache: \"reload\"});\n      return (await countResponse.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"XMLHttpRequest":{"write":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        {\"secret\": xhr.getResponseHeader(\"date\")}));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","read":"() => new Promise((resolve, reject) => {\n      let xhr = new XMLHttpRequest();\n      xhr.addEventListener(\"load\", () => resolve(\n        xhr.getResponseHeader(\"date\")));\n      xhr.open(\"GET\", \"https://arthuredelstein.net\");\n      xhr.setRequestHeader(\"Cache-Control\", \"max-age\");\n      xhr.send();\n      setTimeout(() => reject({message: \"XHR: no response\"}), 3000);\n    })","readSameFirstParty":"Wed, 08 Sep 2021 22:32:11 GMT","readDifferentFirstParty":"Wed, 08 Sep 2021 22:32:40 GMT","passed":true,"testFailed":false},"iframe":{"write":"(key) => new Promise((resolve, reject) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      iframe.addEventListener(\"load\", () => resolve(key), {once: true});\n      iframe.src = testURI(\"resource\", \"page\", key);\n    })","read":"async (key) => {\n      let iframe = document.createElement(\"iframe\");\n      document.body.appendChild(iframe);\n      let iframeLoadPromise = new Promise((resolve, reject) => {\n        iframe.addEventListener(\"load\", resolve, {once: true});\n      });\n      let address = testURI(\"resource\", \"page\", key);\n      iframe.src = address;\n      await iframeLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"page\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"image":{"write":"(key) => new Promise((resolve, reject) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      img.addEventListener(\"load\", () => resolve(key), {once: true});\n      img.src = testURI(\"resource\", \"image\", key);\n    })","read":"async (key) => {\n      let img = document.createElement(\"img\");\n      document.body.appendChild(img);\n      let imgLoadPromise = new Promise((resolve, reject) => {\n        img.addEventListener(\"load\", resolve, {once: true});\n      });\n      img.src = testURI(\"resource\", \"image\", key);\n      await imgLoadPromise;\n      let response = await fetch(\n        testURI(\"count\", \"image\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"CacheStorage":{"write":"async (key) => {\n      let cache = await caches.open(\"supercookies\");\n      cache.addAll([`test.css?key=${key}`]);\n    }","read":"async () => {\n      let cache = await caches.open(\"supercookies\");\n      let cacheKeys = await cache.keys();\n      let url = cacheKeys[0].url;\n      return (new URL(url)).searchParams.get(\"key\");\n    }","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"favicon":{"write":"(key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      return key;\n    }","read":"async (key) => {\n      parent.postMessage({\n        faviconURI: testURI(\"resource\", \"favicon\", key)\n      }, \"*\");\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"favicon\", key), {\"cache\": \"reload\"});\n      let count = (await response.text()).trim();\n      if (count === \"0\") {\n        throw new Error(\"favicons never requested\");\n      }\n      return count;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"font":{"write":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      return key;\n    }","read":"async (key) => {\n      let style = document.createElement(\"style\");\n      style.type='text/css';\n      let fontURI = testURI(\"resource\", \"font\", key);\n      style.innerHTML = `@font-face {font-family: \"myFont\"; src: url(\"${fontURI}\"); } body { font-family: \"myFont\" }`;\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"font\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"css":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"stylesheet\";\n      link.href = testURI(\"resource\", \"css\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"css\", key), {\"cache\": \"reload\"});\n      return (await response.text()).trim();\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"locks":{"write":"async (key) => {\n      if (navigator.locks) {\n        navigator.locks.request(key, lock => new Promise((f,r) => {}));\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].clientId;\n      }\n    }","read":"async () => {\n      if (navigator.locks) {\n        let queryResult = await navigator.locks.query();\n        return queryResult.held[0].name;\n      }\n    }","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: Failed to execute 'query' on 'LockManager': Access to the Locks API is denied in this context.","passed":true,"testFailed":false},"etag":{"write":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      return key;\n    }","read":"async (key) => {\n      await fetch(testURI(\"etag\", \"request\", key));\n      let response = await fetch(testURI(\"etag\", \"value\", key));\n      let responseText = await response.text();\n      if (responseText === \"undefined\") {\n        return undefined;\n      } else {\n        return responseText;\n      }\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"HSTS":{"write":"() => {\n      let image = document.getElementById(\"hsts-image\");\n      image.src = \"https://hsts.arthuredelstein.net/set_hsts.png\";\n    }","read":"() => new Promise((resolve, reject) => {\n      let image = document.getElementById(\"hsts-image\");\n      image.onload = () => resolve(\"image load succeeded\");\n      image.onerror = () => reject(new Error(\"image load failed\"));\n      image.src = \"http://hsts.arthuredelstein.net/test_hsts.png\";\n    })","readSameFirstParty":"image load succeeded","readDifferentFirstParty":"image load succeeded","passed":false,"testFailed":false},"TLS_Session_Id":{"write":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","read":"async () => {\n      let results = await fetch(\"https://tls.arthuredelstein.net:8900/\");\n      return (await results.json()).sessionId;\n    }","readSameFirstParty":"ef64aa3a0eb18cb99ee7b7380b5f72b3a61e908ea7f3b5b477e8b54d8b1cd481","readDifferentFirstParty":"77bff79cc5ff1b1acaa750f3a552c1d6a44e01cad4fc7888be141f80ec56ed0b","passed":true,"testFailed":false},"prefetch":{"write":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      return key;\n    }","read":"async (key) => {\n      let link = document.createElement(\"link\");\n      link.rel = \"prefetch\";\n      link.href = testURI(\"resource\", \"prefetch\", key);\n      document.getElementsByTagName(\"head\")[0].appendChild(link);\n      await sleepMs(500);\n      let response = await fetch(\n        testURI(\"count\", \"prefetch\", key), {\"cache\": \"reload\"});\n      let countString = (await response.text()).trim();\n      if (parseInt(countString) === 0) {\n        throw new Error(\"prefetch isn't being used\");\n      }\n      return countString;\n    }","readSameFirstParty":"Error: Failed to fetch","readDifferentFirstParty":"Error: Failed to fetch","passed":true,"testFailed":false},"web_sql_database":{"write":"async (key) => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let tx = new Promise((resolve) => database.transaction(tx => {\n        tx.executeSql(\n          `CREATE TABLE IF NOT EXISTS cache(\n             id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             value TEXT NOT NULL,\n             UNIQUE (name)\n           )`,\n          [], (tx, rs) => {}, (tx, err) => {});\n        tx.executeSql(\n          `INSERT OR REPLACE INTO cache(name, value)\n           VALUES(?, ?)`,\n          [\"secret\", key], (tx, rs) => {}, (tx, rs) => {});\n      }));\n    }","read":"async () => {\n      let database = window.openDatabase(\"sqlite_supercookie\", \"\", \"supercookie\", 1024 * 1024);\n      let result = await new Promise((resolve, reject) => database.transaction(tx => {\n        tx.executeSql(\n          \"SELECT value FROM cache WHERE name=?\",\n          [\"secret\"],\n          (tx, rs) => resolve(rs),\n          (tx, err) => reject(err));\n      }));\n      return result.rows.item(0).value;\n    }","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"Error: An attempt was made to break through the security policy of the user agent.","passed":true,"testFailed":false},"h2_connection":{"write":"async (secret) => {\n      await fetch(`https://h2.arthuredelstein.net:8902/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h2.arthuredelstein.net:8902/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"5502165970659245","readDifferentFirstParty":"5502165970659245","passed":false,"testFailed":false},"h1_connection":{"write":"async (secret) => {\n      await fetch(`https://h1.arthuredelstein.net:8901/?mode=write&secret=${secret}`);\n    }","read":"async () => {\n      let response = await fetch(`https://h1.arthuredelstein.net:8901/?mode=read`);\n      return await response.text();\n    }","readSameFirstParty":"","readDifferentFirstParty":"","testFailed":true},"ServiceWorker":{"write":"async (key) => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      await fetch(`serviceworker-write?secret=${key}`);\n    }","read":"async () => {\n      let registration = await navigator.serviceWorker.register(\n        'serviceWorker.js');\n      console.log(registration);\n      await navigator.serviceWorker.ready;\n      console.log(\"service worker ready\");\n      await sleepMs(100);\n      let response = await fetch(\"serviceworker-read\");\n      return await response.text();\n    }","readSameFirstParty":"20984048305562086","readDifferentFirstParty":"Error: Failed to register a ServiceWorker for scope ('https://arthuredelstein.net/browser-privacy/tests/') with script ('https://arthuredelstein.net/browser-privacy/tests/serviceWorker.js'): The user denied permission to use Service Worker.","passed":true,"testFailed":false}},"navigation":{"sessionStorage":{"write":"(secret) => sessionStorage.setItem(\"secret\", secret)","read":"() => sessionStorage.getItem(\"secret\")","readSameFirstParty":"20984048305562086","readDifferentFirstParty":null,"passed":true,"testFailed":false},"window.name":{"write":"(secret) => parent.postMessage({\"write window.name\": secret})","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read window.name\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"20984048305562086","readDifferentFirstParty":"20984048305562086","passed":false,"testFailed":false},"document.referrer":{"write":"(secret) => { /* do nothing */ }","read":"() => new Promise((resolve) => {\n      parent.postMessage({\"read document.referrer\": true}, \"*\");\n      addEventListener(\"message\", ({data}) => {\n        resolve(data);\n      }, { once: true });\n    })","readSameFirstParty":"https://arthuredelstein.net/","readDifferentFirstParty":"https://arthuredelstein.net/","passed":false,"testFailed":false}},"query":{"fbclid":{"passed":true},"gclid":{"passed":true},"msclkid":{"passed":true},"mc_eid":{"passed":true},"dclid":{"passed":true},"oly_anon_id":{"passed":true},"oly_enc_id":{"passed":true},"_openstat":{"passed":true},"vero_conv":{"passed":true},"vero_id":{"passed":true},"wickedid":{"passed":true},"yclid":{"passed":true},"__s":{"passed":true},"rb_clickid":{"value":"28230213427430995","passed":false},"s_cid":{"value":"28230213427430995","passed":false},"ml_subscriber":{"value":"28230213427430995","passed":false},"ml_subscriber_hash":{"value":"28230213427430995","passed":false},"_hsenc":{"passed":true},"__hssc":{"passed":true},"__hstc":{"passed":true},"__hsfp":{"passed":true},"hsCtaTracking":{"passed":true},"mkt_tok":{"value":"28230213427430995","passed":false},"igshid":{"value":"28230213427430995","passed":false}}},"timeStarted":"2021-09-08T22:31:03.093Z","tor_mode":true}],"git":"08828bef61fff0e54ee4f1d741097c48815a933e","timeStarted":"2021-09-08T22:22:20.839Z","timeStopped":"2021-09-08T22:32:57.662Z"}